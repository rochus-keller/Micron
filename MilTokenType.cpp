// This file was automatically generated by EbnfStudio; don't modify it!
#include "MilTokenType.h"

namespace Mil {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_Hash: return "#";
			case Tok_Lpar: return "(";
			case Tok_Latt: return "(*";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Ratt: return "*)";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_Dot: return ".";
			case Tok_2Dot: return "..";
			case Tok_2Slash: return "//";
			case Tok_Colon: return ":";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Eq: return "=";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_Lbrace: return "{";
			case Tok_Rbrace: return "}";
			case Tok_ABS: return "ABS";
			case Tok_ADD: return "ADD";
			case Tok_AND: return "AND";
			case Tok_ARRAY: return "ARRAY";
			case Tok_BEGIN: return "BEGIN";
			case Tok_CALL: return "CALL";
			case Tok_CALLI: return "CALLI";
			case Tok_CALLINST: return "CALLINST";
			case Tok_CALLVI: return "CALLVI";
			case Tok_CALLVIRT: return "CALLVIRT";
			case Tok_CASE: return "CASE";
			case Tok_CASTPTR: return "CASTPTR";
			case Tok_CEQ: return "CEQ";
			case Tok_CGT: return "CGT";
			case Tok_CGT_UN: return "CGT_UN";
			case Tok_CLT: return "CLT";
			case Tok_CLT_UN: return "CLT_UN";
			case Tok_CONST: return "CONST";
			case Tok_CONV_I1: return "CONV_I1";
			case Tok_CONV_I2: return "CONV_I2";
			case Tok_CONV_I4: return "CONV_I4";
			case Tok_CONV_I8: return "CONV_I8";
			case Tok_CONV_R4: return "CONV_R4";
			case Tok_CONV_R8: return "CONV_R8";
			case Tok_CONV_U1: return "CONV_U1";
			case Tok_CONV_U2: return "CONV_U2";
			case Tok_CONV_U4: return "CONV_U4";
			case Tok_CONV_U8: return "CONV_U8";
			case Tok_DIV: return "DIV";
			case Tok_DIV_UN: return "DIV_UN";
			case Tok_DO: return "DO";
			case Tok_DUP: return "DUP";
			case Tok_ELSE: return "ELSE";
			case Tok_END: return "END";
			case Tok_EXIT: return "EXIT";
			case Tok_EXTERN: return "EXTERN";
			case Tok_FOREIGN: return "FOREIGN";
			case Tok_FORWARD: return "FORWARD";
			case Tok_FREE: return "FREE";
			case Tok_GOTO: return "GOTO";
			case Tok_IF: return "IF";
			case Tok_IIF: return "IIF";
			case Tok_IMPORT: return "IMPORT";
			case Tok_INIT: return "INIT";
			case Tok_INITOBJ: return "INITOBJ";
			case Tok_INLINE: return "INLINE";
			case Tok_INVAR: return "INVAR";
			case Tok_ISINST: return "ISINST";
			case Tok_LABEL: return "LABEL";
			case Tok_LDARG: return "LDARG";
			case Tok_LDARGA: return "LDARGA";
			case Tok_LDARGA_S: return "LDARGA_S";
			case Tok_LDARG_0: return "LDARG_0";
			case Tok_LDARG_1: return "LDARG_1";
			case Tok_LDARG_2: return "LDARG_2";
			case Tok_LDARG_3: return "LDARG_3";
			case Tok_LDARG_S: return "LDARG_S";
			case Tok_LDC_I4: return "LDC_I4";
			case Tok_LDC_I4_0: return "LDC_I4_0";
			case Tok_LDC_I4_1: return "LDC_I4_1";
			case Tok_LDC_I4_2: return "LDC_I4_2";
			case Tok_LDC_I4_3: return "LDC_I4_3";
			case Tok_LDC_I4_4: return "LDC_I4_4";
			case Tok_LDC_I4_5: return "LDC_I4_5";
			case Tok_LDC_I4_6: return "LDC_I4_6";
			case Tok_LDC_I4_7: return "LDC_I4_7";
			case Tok_LDC_I4_8: return "LDC_I4_8";
			case Tok_LDC_I4_M1: return "LDC_I4_M1";
			case Tok_LDC_I4_S: return "LDC_I4_S";
			case Tok_LDC_I8: return "LDC_I8";
			case Tok_LDC_IP: return "LDC_IP";
			case Tok_LDC_OBJ: return "LDC_OBJ";
			case Tok_LDC_R4: return "LDC_R4";
			case Tok_LDC_R8: return "LDC_R8";
			case Tok_LDELEM: return "LDELEM";
			case Tok_LDELEMA: return "LDELEMA";
			case Tok_LDELEM_I1: return "LDELEM_I1";
			case Tok_LDELEM_I2: return "LDELEM_I2";
			case Tok_LDELEM_I4: return "LDELEM_I4";
			case Tok_LDELEM_I8: return "LDELEM_I8";
			case Tok_LDELEM_IP: return "LDELEM_IP";
			case Tok_LDELEM_IPP: return "LDELEM_IPP";
			case Tok_LDELEM_R4: return "LDELEM_R4";
			case Tok_LDELEM_R8: return "LDELEM_R8";
			case Tok_LDELEM_U1: return "LDELEM_U1";
			case Tok_LDELEM_U2: return "LDELEM_U2";
			case Tok_LDELEM_U4: return "LDELEM_U4";
			case Tok_LDELEM_U8: return "LDELEM_U8";
			case Tok_LDFLD: return "LDFLD";
			case Tok_LDFLDA: return "LDFLDA";
			case Tok_LDIND: return "LDIND";
			case Tok_LDIND_I1: return "LDIND_I1";
			case Tok_LDIND_I2: return "LDIND_I2";
			case Tok_LDIND_I4: return "LDIND_I4";
			case Tok_LDIND_I8: return "LDIND_I8";
			case Tok_LDIND_IP: return "LDIND_IP";
			case Tok_LDIND_IPP: return "LDIND_IPP";
			case Tok_LDIND_R4: return "LDIND_R4";
			case Tok_LDIND_R8: return "LDIND_R8";
			case Tok_LDIND_U1: return "LDIND_U1";
			case Tok_LDIND_U2: return "LDIND_U2";
			case Tok_LDIND_U4: return "LDIND_U4";
			case Tok_LDIND_U8: return "LDIND_U8";
			case Tok_LDLOC: return "LDLOC";
			case Tok_LDLOCA: return "LDLOCA";
			case Tok_LDLOCA_S: return "LDLOCA_S";
			case Tok_LDLOC_0: return "LDLOC_0";
			case Tok_LDLOC_1: return "LDLOC_1";
			case Tok_LDLOC_2: return "LDLOC_2";
			case Tok_LDLOC_3: return "LDLOC_3";
			case Tok_LDLOC_S: return "LDLOC_S";
			case Tok_LDMETH: return "LDMETH";
			case Tok_LDNULL: return "LDNULL";
			case Tok_LDPROC: return "LDPROC";
			case Tok_LDSTR: return "LDSTR";
			case Tok_LDVAR: return "LDVAR";
			case Tok_LDVARA: return "LDVARA";
			case Tok_LINE: return "LINE";
			case Tok_LOOP: return "LOOP";
			case Tok_MODULE: return "MODULE";
			case Tok_MUL: return "MUL";
			case Tok_NEG: return "NEG";
			case Tok_NEWARR: return "NEWARR";
			case Tok_NEWOBJ: return "NEWOBJ";
			case Tok_NEWVLA: return "NEWVLA";
			case Tok_NOP: return "NOP";
			case Tok_NOT: return "NOT";
			case Tok_OBJECT: return "OBJECT";
			case Tok_OF: return "OF";
			case Tok_OR: return "OR";
			case Tok_POINTER: return "POINTER";
			case Tok_POP: return "POP";
			case Tok_PROC: return "PROC";
			case Tok_PROCEDURE: return "PROCEDURE";
			case Tok_PTROFF: return "PTROFF";
			case Tok_REM: return "REM";
			case Tok_REM_UN: return "REM_UN";
			case Tok_REPEAT: return "REPEAT";
			case Tok_RET: return "RET";
			case Tok_SHL: return "SHL";
			case Tok_SHR: return "SHR";
			case Tok_SHR_UN: return "SHR_UN";
			case Tok_SIZEOF: return "SIZEOF";
			case Tok_SOURCE: return "SOURCE";
			case Tok_STARG: return "STARG";
			case Tok_STARG_S: return "STARG_S";
			case Tok_STELEM: return "STELEM";
			case Tok_STELEM_I1: return "STELEM_I1";
			case Tok_STELEM_I2: return "STELEM_I2";
			case Tok_STELEM_I4: return "STELEM_I4";
			case Tok_STELEM_I8: return "STELEM_I8";
			case Tok_STELEM_IP: return "STELEM_IP";
			case Tok_STELEM_IPP: return "STELEM_IPP";
			case Tok_STELEM_R4: return "STELEM_R4";
			case Tok_STELEM_R8: return "STELEM_R8";
			case Tok_STFLD: return "STFLD";
			case Tok_STIND: return "STIND";
			case Tok_STIND_I1: return "STIND_I1";
			case Tok_STIND_I2: return "STIND_I2";
			case Tok_STIND_I4: return "STIND_I4";
			case Tok_STIND_I8: return "STIND_I8";
			case Tok_STIND_IP: return "STIND_IP";
			case Tok_STIND_IPP: return "STIND_IPP";
			case Tok_STIND_R4: return "STIND_R4";
			case Tok_STIND_R8: return "STIND_R8";
			case Tok_STLOC: return "STLOC";
			case Tok_STLOC_0: return "STLOC_0";
			case Tok_STLOC_1: return "STLOC_1";
			case Tok_STLOC_2: return "STLOC_2";
			case Tok_STLOC_3: return "STLOC_3";
			case Tok_STLOC_S: return "STLOC_S";
			case Tok_STRCPY: return "STRCPY";
			case Tok_STRUCT: return "STRUCT";
			case Tok_STVAR: return "STVAR";
			case Tok_SUB: return "SUB";
			case Tok_SWITCH: return "SWITCH";
			case Tok_THEN: return "THEN";
			case Tok_TO: return "TO";
			case Tok_TYPE: return "TYPE";
			case Tok_UNION: return "UNION";
			case Tok_UNTIL: return "UNTIL";
			case Tok_VAR: return "VAR";
			case Tok_WHILE: return "WHILE";
			case Tok_XOR: return "XOR";
			case Tok_ident: return "ident";
			case Tok_unsigned: return "unsigned";
			case Tok_float: return "float";
			case Tok_string: return "string";
			case Tok_hexstring: return "hexstring";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_Hash: return "Tok_Hash";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Latt: return "Tok_Latt";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Ratt: return "Tok_Ratt";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_Dot: return "Tok_Dot";
			case Tok_2Dot: return "Tok_2Dot";
			case Tok_2Slash: return "Tok_2Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Eq: return "Tok_Eq";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_ABS: return "Tok_ABS";
			case Tok_ADD: return "Tok_ADD";
			case Tok_AND: return "Tok_AND";
			case Tok_ARRAY: return "Tok_ARRAY";
			case Tok_BEGIN: return "Tok_BEGIN";
			case Tok_CALL: return "Tok_CALL";
			case Tok_CALLI: return "Tok_CALLI";
			case Tok_CALLINST: return "Tok_CALLINST";
			case Tok_CALLVI: return "Tok_CALLVI";
			case Tok_CALLVIRT: return "Tok_CALLVIRT";
			case Tok_CASE: return "Tok_CASE";
			case Tok_CASTPTR: return "Tok_CASTPTR";
			case Tok_CEQ: return "Tok_CEQ";
			case Tok_CGT: return "Tok_CGT";
			case Tok_CGT_UN: return "Tok_CGT_UN";
			case Tok_CLT: return "Tok_CLT";
			case Tok_CLT_UN: return "Tok_CLT_UN";
			case Tok_CONST: return "Tok_CONST";
			case Tok_CONV_I1: return "Tok_CONV_I1";
			case Tok_CONV_I2: return "Tok_CONV_I2";
			case Tok_CONV_I4: return "Tok_CONV_I4";
			case Tok_CONV_I8: return "Tok_CONV_I8";
			case Tok_CONV_R4: return "Tok_CONV_R4";
			case Tok_CONV_R8: return "Tok_CONV_R8";
			case Tok_CONV_U1: return "Tok_CONV_U1";
			case Tok_CONV_U2: return "Tok_CONV_U2";
			case Tok_CONV_U4: return "Tok_CONV_U4";
			case Tok_CONV_U8: return "Tok_CONV_U8";
			case Tok_DIV: return "Tok_DIV";
			case Tok_DIV_UN: return "Tok_DIV_UN";
			case Tok_DO: return "Tok_DO";
			case Tok_DUP: return "Tok_DUP";
			case Tok_ELSE: return "Tok_ELSE";
			case Tok_END: return "Tok_END";
			case Tok_EXIT: return "Tok_EXIT";
			case Tok_EXTERN: return "Tok_EXTERN";
			case Tok_FOREIGN: return "Tok_FOREIGN";
			case Tok_FORWARD: return "Tok_FORWARD";
			case Tok_FREE: return "Tok_FREE";
			case Tok_GOTO: return "Tok_GOTO";
			case Tok_IF: return "Tok_IF";
			case Tok_IIF: return "Tok_IIF";
			case Tok_IMPORT: return "Tok_IMPORT";
			case Tok_INIT: return "Tok_INIT";
			case Tok_INITOBJ: return "Tok_INITOBJ";
			case Tok_INLINE: return "Tok_INLINE";
			case Tok_INVAR: return "Tok_INVAR";
			case Tok_ISINST: return "Tok_ISINST";
			case Tok_LABEL: return "Tok_LABEL";
			case Tok_LDARG: return "Tok_LDARG";
			case Tok_LDARGA: return "Tok_LDARGA";
			case Tok_LDARGA_S: return "Tok_LDARGA_S";
			case Tok_LDARG_0: return "Tok_LDARG_0";
			case Tok_LDARG_1: return "Tok_LDARG_1";
			case Tok_LDARG_2: return "Tok_LDARG_2";
			case Tok_LDARG_3: return "Tok_LDARG_3";
			case Tok_LDARG_S: return "Tok_LDARG_S";
			case Tok_LDC_I4: return "Tok_LDC_I4";
			case Tok_LDC_I4_0: return "Tok_LDC_I4_0";
			case Tok_LDC_I4_1: return "Tok_LDC_I4_1";
			case Tok_LDC_I4_2: return "Tok_LDC_I4_2";
			case Tok_LDC_I4_3: return "Tok_LDC_I4_3";
			case Tok_LDC_I4_4: return "Tok_LDC_I4_4";
			case Tok_LDC_I4_5: return "Tok_LDC_I4_5";
			case Tok_LDC_I4_6: return "Tok_LDC_I4_6";
			case Tok_LDC_I4_7: return "Tok_LDC_I4_7";
			case Tok_LDC_I4_8: return "Tok_LDC_I4_8";
			case Tok_LDC_I4_M1: return "Tok_LDC_I4_M1";
			case Tok_LDC_I4_S: return "Tok_LDC_I4_S";
			case Tok_LDC_I8: return "Tok_LDC_I8";
			case Tok_LDC_IP: return "Tok_LDC_IP";
			case Tok_LDC_OBJ: return "Tok_LDC_OBJ";
			case Tok_LDC_R4: return "Tok_LDC_R4";
			case Tok_LDC_R8: return "Tok_LDC_R8";
			case Tok_LDELEM: return "Tok_LDELEM";
			case Tok_LDELEMA: return "Tok_LDELEMA";
			case Tok_LDELEM_I1: return "Tok_LDELEM_I1";
			case Tok_LDELEM_I2: return "Tok_LDELEM_I2";
			case Tok_LDELEM_I4: return "Tok_LDELEM_I4";
			case Tok_LDELEM_I8: return "Tok_LDELEM_I8";
			case Tok_LDELEM_IP: return "Tok_LDELEM_IP";
			case Tok_LDELEM_IPP: return "Tok_LDELEM_IPP";
			case Tok_LDELEM_R4: return "Tok_LDELEM_R4";
			case Tok_LDELEM_R8: return "Tok_LDELEM_R8";
			case Tok_LDELEM_U1: return "Tok_LDELEM_U1";
			case Tok_LDELEM_U2: return "Tok_LDELEM_U2";
			case Tok_LDELEM_U4: return "Tok_LDELEM_U4";
			case Tok_LDELEM_U8: return "Tok_LDELEM_U8";
			case Tok_LDFLD: return "Tok_LDFLD";
			case Tok_LDFLDA: return "Tok_LDFLDA";
			case Tok_LDIND: return "Tok_LDIND";
			case Tok_LDIND_I1: return "Tok_LDIND_I1";
			case Tok_LDIND_I2: return "Tok_LDIND_I2";
			case Tok_LDIND_I4: return "Tok_LDIND_I4";
			case Tok_LDIND_I8: return "Tok_LDIND_I8";
			case Tok_LDIND_IP: return "Tok_LDIND_IP";
			case Tok_LDIND_IPP: return "Tok_LDIND_IPP";
			case Tok_LDIND_R4: return "Tok_LDIND_R4";
			case Tok_LDIND_R8: return "Tok_LDIND_R8";
			case Tok_LDIND_U1: return "Tok_LDIND_U1";
			case Tok_LDIND_U2: return "Tok_LDIND_U2";
			case Tok_LDIND_U4: return "Tok_LDIND_U4";
			case Tok_LDIND_U8: return "Tok_LDIND_U8";
			case Tok_LDLOC: return "Tok_LDLOC";
			case Tok_LDLOCA: return "Tok_LDLOCA";
			case Tok_LDLOCA_S: return "Tok_LDLOCA_S";
			case Tok_LDLOC_0: return "Tok_LDLOC_0";
			case Tok_LDLOC_1: return "Tok_LDLOC_1";
			case Tok_LDLOC_2: return "Tok_LDLOC_2";
			case Tok_LDLOC_3: return "Tok_LDLOC_3";
			case Tok_LDLOC_S: return "Tok_LDLOC_S";
			case Tok_LDMETH: return "Tok_LDMETH";
			case Tok_LDNULL: return "Tok_LDNULL";
			case Tok_LDPROC: return "Tok_LDPROC";
			case Tok_LDSTR: return "Tok_LDSTR";
			case Tok_LDVAR: return "Tok_LDVAR";
			case Tok_LDVARA: return "Tok_LDVARA";
			case Tok_LINE: return "Tok_LINE";
			case Tok_LOOP: return "Tok_LOOP";
			case Tok_MODULE: return "Tok_MODULE";
			case Tok_MUL: return "Tok_MUL";
			case Tok_NEG: return "Tok_NEG";
			case Tok_NEWARR: return "Tok_NEWARR";
			case Tok_NEWOBJ: return "Tok_NEWOBJ";
			case Tok_NEWVLA: return "Tok_NEWVLA";
			case Tok_NOP: return "Tok_NOP";
			case Tok_NOT: return "Tok_NOT";
			case Tok_OBJECT: return "Tok_OBJECT";
			case Tok_OF: return "Tok_OF";
			case Tok_OR: return "Tok_OR";
			case Tok_POINTER: return "Tok_POINTER";
			case Tok_POP: return "Tok_POP";
			case Tok_PROC: return "Tok_PROC";
			case Tok_PROCEDURE: return "Tok_PROCEDURE";
			case Tok_PTROFF: return "Tok_PTROFF";
			case Tok_REM: return "Tok_REM";
			case Tok_REM_UN: return "Tok_REM_UN";
			case Tok_REPEAT: return "Tok_REPEAT";
			case Tok_RET: return "Tok_RET";
			case Tok_SHL: return "Tok_SHL";
			case Tok_SHR: return "Tok_SHR";
			case Tok_SHR_UN: return "Tok_SHR_UN";
			case Tok_SIZEOF: return "Tok_SIZEOF";
			case Tok_SOURCE: return "Tok_SOURCE";
			case Tok_STARG: return "Tok_STARG";
			case Tok_STARG_S: return "Tok_STARG_S";
			case Tok_STELEM: return "Tok_STELEM";
			case Tok_STELEM_I1: return "Tok_STELEM_I1";
			case Tok_STELEM_I2: return "Tok_STELEM_I2";
			case Tok_STELEM_I4: return "Tok_STELEM_I4";
			case Tok_STELEM_I8: return "Tok_STELEM_I8";
			case Tok_STELEM_IP: return "Tok_STELEM_IP";
			case Tok_STELEM_IPP: return "Tok_STELEM_IPP";
			case Tok_STELEM_R4: return "Tok_STELEM_R4";
			case Tok_STELEM_R8: return "Tok_STELEM_R8";
			case Tok_STFLD: return "Tok_STFLD";
			case Tok_STIND: return "Tok_STIND";
			case Tok_STIND_I1: return "Tok_STIND_I1";
			case Tok_STIND_I2: return "Tok_STIND_I2";
			case Tok_STIND_I4: return "Tok_STIND_I4";
			case Tok_STIND_I8: return "Tok_STIND_I8";
			case Tok_STIND_IP: return "Tok_STIND_IP";
			case Tok_STIND_IPP: return "Tok_STIND_IPP";
			case Tok_STIND_R4: return "Tok_STIND_R4";
			case Tok_STIND_R8: return "Tok_STIND_R8";
			case Tok_STLOC: return "Tok_STLOC";
			case Tok_STLOC_0: return "Tok_STLOC_0";
			case Tok_STLOC_1: return "Tok_STLOC_1";
			case Tok_STLOC_2: return "Tok_STLOC_2";
			case Tok_STLOC_3: return "Tok_STLOC_3";
			case Tok_STLOC_S: return "Tok_STLOC_S";
			case Tok_STRCPY: return "Tok_STRCPY";
			case Tok_STRUCT: return "Tok_STRUCT";
			case Tok_STVAR: return "Tok_STVAR";
			case Tok_SUB: return "Tok_SUB";
			case Tok_SWITCH: return "Tok_SWITCH";
			case Tok_THEN: return "Tok_THEN";
			case Tok_TO: return "Tok_TO";
			case Tok_TYPE: return "Tok_TYPE";
			case Tok_UNION: return "Tok_UNION";
			case Tok_UNTIL: return "Tok_UNTIL";
			case Tok_VAR: return "Tok_VAR";
			case Tok_WHILE: return "Tok_WHILE";
			case Tok_XOR: return "Tok_XOR";
			case Tok_ident: return "Tok_ident";
			case Tok_unsigned: return "Tok_unsigned";
			case Tok_float: return "Tok_float";
			case Tok_string: return "Tok_string";
			case Tok_hexstring: return "Tok_hexstring";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const char* str, quint32 len, int i ){
		return ( i < len ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		return tokenTypeFromString(str.constData(),str.size(),pos);
	}
	TokenType tokenTypeFromString( const char* str, quint32 len, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,len,i) ){
		case '!':
			res = Tok_Bang; i += 1;
			break;
		case '#':
			res = Tok_Hash; i += 1;
			break;
		case '(':
			if( at(str,len,i+1) == '*' ){
				res = Tok_Latt; i += 2;
			} else {
				res = Tok_Lpar; i += 1;
			}
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			if( at(str,len,i+1) == ')' ){
				res = Tok_Ratt; i += 2;
			} else {
				res = Tok_Star; i += 1;
			}
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			res = Tok_Minus; i += 1;
			break;
		case '.':
			if( at(str,len,i+1) == '.' ){
				res = Tok_2Dot; i += 2;
			} else {
				res = Tok_Dot; i += 1;
			}
			break;
		case '/':
			if( at(str,len,i+1) == '/' ){
				res = Tok_2Slash; i += 2;
			}
			break;
		case ':':
			if( at(str,len,i+1) == '=' ){
				res = Tok_ColonEq; i += 2;
			} else {
				res = Tok_Colon; i += 1;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '=':
			res = Tok_Eq; i += 1;
			break;
		case 'A':
			switch( at(str,len,i+1) ){
			case 'B':
				if( at(str,len,i+2) == 'S' ){
					res = Tok_ABS; i += 3;
				}
				break;
			case 'D':
				if( at(str,len,i+2) == 'D' ){
					res = Tok_ADD; i += 3;
				}
				break;
			case 'N':
				if( at(str,len,i+2) == 'D' ){
					res = Tok_AND; i += 3;
				}
				break;
			case 'R':
				if( at(str,len,i+2) == 'R' ){
					if( at(str,len,i+3) == 'A' ){
						if( at(str,len,i+4) == 'Y' ){
							res = Tok_ARRAY; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'B':
			if( at(str,len,i+1) == 'E' ){
				if( at(str,len,i+2) == 'G' ){
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'N' ){
							res = Tok_BEGIN; i += 5;
						}
					}
				}
			}
			break;
		case 'C':
			switch( at(str,len,i+1) ){
			case 'A':
				switch( at(str,len,i+2) ){
				case 'L':
					if( at(str,len,i+3) == 'L' ){
						switch( at(str,len,i+4) ){
						case 'I':
							if( at(str,len,i+5) == 'N' ){
								if( at(str,len,i+6) == 'S' ){
									if( at(str,len,i+7) == 'T' ){
										res = Tok_CALLINST; i += 8;
									}
								}
							} else {
								res = Tok_CALLI; i += 5;
							}
							break;
						case 'V':
							if( at(str,len,i+5) == 'I' ){
								if( at(str,len,i+6) == 'R' ){
									if( at(str,len,i+7) == 'T' ){
										res = Tok_CALLVIRT; i += 8;
									}
								} else {
									res = Tok_CALLVI; i += 6;
								}
							}
							break;
						default:
							res = Tok_CALL; i += 4;
							break;
						}
					}
					break;
				case 'S':
					switch( at(str,len,i+3) ){
					case 'E':
						res = Tok_CASE; i += 4;
						break;
					case 'T':
						if( at(str,len,i+4) == 'P' ){
							if( at(str,len,i+5) == 'T' ){
								if( at(str,len,i+6) == 'R' ){
									res = Tok_CASTPTR; i += 7;
								}
							}
						}
						break;
					}
					break;
				}
				break;
			case 'E':
				if( at(str,len,i+2) == 'Q' ){
					res = Tok_CEQ; i += 3;
				}
				break;
			case 'G':
				if( at(str,len,i+2) == 'T' ){
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'U' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_CGT_UN; i += 6;
							}
						}
					} else {
						res = Tok_CGT; i += 3;
					}
				}
				break;
			case 'L':
				if( at(str,len,i+2) == 'T' ){
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'U' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_CLT_UN; i += 6;
							}
						}
					} else {
						res = Tok_CLT; i += 3;
					}
				}
				break;
			case 'O':
				if( at(str,len,i+2) == 'N' ){
					switch( at(str,len,i+3) ){
					case 'S':
						if( at(str,len,i+4) == 'T' ){
							res = Tok_CONST; i += 5;
						}
						break;
					case 'V':
						if( at(str,len,i+4) == '_' ){
							switch( at(str,len,i+5) ){
							case 'I':
								switch( at(str,len,i+6) ){
								case '1':
									res = Tok_CONV_I1; i += 7;
									break;
								case '2':
									res = Tok_CONV_I2; i += 7;
									break;
								case '4':
									res = Tok_CONV_I4; i += 7;
									break;
								case '8':
									res = Tok_CONV_I8; i += 7;
									break;
								}
								break;
							case 'R':
								switch( at(str,len,i+6) ){
								case '4':
									res = Tok_CONV_R4; i += 7;
									break;
								case '8':
									res = Tok_CONV_R8; i += 7;
									break;
								}
								break;
							case 'U':
								switch( at(str,len,i+6) ){
								case '1':
									res = Tok_CONV_U1; i += 7;
									break;
								case '2':
									res = Tok_CONV_U2; i += 7;
									break;
								case '4':
									res = Tok_CONV_U4; i += 7;
									break;
								case '8':
									res = Tok_CONV_U8; i += 7;
									break;
								}
								break;
							}
						}
						break;
					}
				}
				break;
			}
			break;
		case 'D':
			switch( at(str,len,i+1) ){
			case 'I':
				if( at(str,len,i+2) == 'V' ){
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'U' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_DIV_UN; i += 6;
							}
						}
					} else {
						res = Tok_DIV; i += 3;
					}
				}
				break;
			case 'O':
				res = Tok_DO; i += 2;
				break;
			case 'U':
				if( at(str,len,i+2) == 'P' ){
					res = Tok_DUP; i += 3;
				}
				break;
			}
			break;
		case 'E':
			switch( at(str,len,i+1) ){
			case 'L':
				if( at(str,len,i+2) == 'S' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_ELSE; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,len,i+2) == 'D' ){
					res = Tok_END; i += 3;
				}
				break;
			case 'X':
				switch( at(str,len,i+2) ){
				case 'I':
					if( at(str,len,i+3) == 'T' ){
						res = Tok_EXIT; i += 4;
					}
					break;
				case 'T':
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'R' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_EXTERN; i += 6;
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 'F':
			switch( at(str,len,i+1) ){
			case 'O':
				if( at(str,len,i+2) == 'R' ){
					switch( at(str,len,i+3) ){
					case 'E':
						if( at(str,len,i+4) == 'I' ){
							if( at(str,len,i+5) == 'G' ){
								if( at(str,len,i+6) == 'N' ){
									res = Tok_FOREIGN; i += 7;
								}
							}
						}
						break;
					case 'W':
						if( at(str,len,i+4) == 'A' ){
							if( at(str,len,i+5) == 'R' ){
								if( at(str,len,i+6) == 'D' ){
									res = Tok_FORWARD; i += 7;
								}
							}
						}
						break;
					}
				}
				break;
			case 'R':
				if( at(str,len,i+2) == 'E' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_FREE; i += 4;
					}
				}
				break;
			}
			break;
		case 'G':
			if( at(str,len,i+1) == 'O' ){
				if( at(str,len,i+2) == 'T' ){
					if( at(str,len,i+3) == 'O' ){
						res = Tok_GOTO; i += 4;
					}
				}
			}
			break;
		case 'I':
			switch( at(str,len,i+1) ){
			case 'F':
				res = Tok_IF; i += 2;
				break;
			case 'I':
				if( at(str,len,i+2) == 'F' ){
					res = Tok_IIF; i += 3;
				}
				break;
			case 'M':
				if( at(str,len,i+2) == 'P' ){
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'R' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_IMPORT; i += 6;
							}
						}
					}
				}
				break;
			case 'N':
				switch( at(str,len,i+2) ){
				case 'I':
					if( at(str,len,i+3) == 'T' ){
						if( at(str,len,i+4) == 'O' ){
							if( at(str,len,i+5) == 'B' ){
								if( at(str,len,i+6) == 'J' ){
									res = Tok_INITOBJ; i += 7;
								}
							}
						} else {
							res = Tok_INIT; i += 4;
						}
					}
					break;
				case 'L':
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'N' ){
							if( at(str,len,i+5) == 'E' ){
								res = Tok_INLINE; i += 6;
							}
						}
					}
					break;
				case 'V':
					if( at(str,len,i+3) == 'A' ){
						if( at(str,len,i+4) == 'R' ){
							res = Tok_INVAR; i += 5;
						}
					}
					break;
				}
				break;
			case 'S':
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'N' ){
						if( at(str,len,i+4) == 'S' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_ISINST; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'L':
			switch( at(str,len,i+1) ){
			case 'A':
				if( at(str,len,i+2) == 'B' ){
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'L' ){
							res = Tok_LABEL; i += 5;
						}
					}
				}
				break;
			case 'D':
				switch( at(str,len,i+2) ){
				case 'A':
					if( at(str,len,i+3) == 'R' ){
						if( at(str,len,i+4) == 'G' ){
							switch( at(str,len,i+5) ){
							case 'A':
								if( at(str,len,i+6) == '_' ){
									if( at(str,len,i+7) == 'S' ){
										res = Tok_LDARGA_S; i += 8;
									}
								} else {
									res = Tok_LDARGA; i += 6;
								}
								break;
							case '_':
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_LDARG_0; i += 7;
									break;
								case '1':
									res = Tok_LDARG_1; i += 7;
									break;
								case '2':
									res = Tok_LDARG_2; i += 7;
									break;
								case '3':
									res = Tok_LDARG_3; i += 7;
									break;
								case 'S':
									res = Tok_LDARG_S; i += 7;
									break;
								}
								break;
							default:
								res = Tok_LDARG; i += 5;
								break;
							}
						}
					}
					break;
				case 'C':
					if( at(str,len,i+3) == '_' ){
						switch( at(str,len,i+4) ){
						case 'I':
							switch( at(str,len,i+5) ){
							case '4':
								if( at(str,len,i+6) == '_' ){
									switch( at(str,len,i+7) ){
									case '0':
										res = Tok_LDC_I4_0; i += 8;
										break;
									case '1':
										res = Tok_LDC_I4_1; i += 8;
										break;
									case '2':
										res = Tok_LDC_I4_2; i += 8;
										break;
									case '3':
										res = Tok_LDC_I4_3; i += 8;
										break;
									case '4':
										res = Tok_LDC_I4_4; i += 8;
										break;
									case '5':
										res = Tok_LDC_I4_5; i += 8;
										break;
									case '6':
										res = Tok_LDC_I4_6; i += 8;
										break;
									case '7':
										res = Tok_LDC_I4_7; i += 8;
										break;
									case '8':
										res = Tok_LDC_I4_8; i += 8;
										break;
									case 'M':
										if( at(str,len,i+8) == '1' ){
											res = Tok_LDC_I4_M1; i += 9;
										}
										break;
									case 'S':
										res = Tok_LDC_I4_S; i += 8;
										break;
									}
								} else {
									res = Tok_LDC_I4; i += 6;
								}
								break;
							case '8':
								res = Tok_LDC_I8; i += 6;
								break;
							case 'P':
								res = Tok_LDC_IP; i += 6;
								break;
							}
							break;
						case 'O':
							if( at(str,len,i+5) == 'B' ){
								if( at(str,len,i+6) == 'J' ){
									res = Tok_LDC_OBJ; i += 7;
								}
							}
							break;
						case 'R':
							switch( at(str,len,i+5) ){
							case '4':
								res = Tok_LDC_R4; i += 6;
								break;
							case '8':
								res = Tok_LDC_R8; i += 6;
								break;
							}
							break;
						}
					}
					break;
				case 'E':
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'E' ){
							if( at(str,len,i+5) == 'M' ){
								switch( at(str,len,i+6) ){
								case 'A':
									res = Tok_LDELEMA; i += 7;
									break;
								case '_':
									switch( at(str,len,i+7) ){
									case 'I':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_LDELEM_I1; i += 9;
											break;
										case '2':
											res = Tok_LDELEM_I2; i += 9;
											break;
										case '4':
											res = Tok_LDELEM_I4; i += 9;
											break;
										case '8':
											res = Tok_LDELEM_I8; i += 9;
											break;
										case 'P':
											if( at(str,len,i+9) == 'P' ){
												res = Tok_LDELEM_IPP; i += 10;
											} else {
												res = Tok_LDELEM_IP; i += 9;
											}
											break;
										}
										break;
									case 'R':
										switch( at(str,len,i+8) ){
										case '4':
											res = Tok_LDELEM_R4; i += 9;
											break;
										case '8':
											res = Tok_LDELEM_R8; i += 9;
											break;
										}
										break;
									case 'U':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_LDELEM_U1; i += 9;
											break;
										case '2':
											res = Tok_LDELEM_U2; i += 9;
											break;
										case '4':
											res = Tok_LDELEM_U4; i += 9;
											break;
										case '8':
											res = Tok_LDELEM_U8; i += 9;
											break;
										}
										break;
									}
									break;
								default:
									res = Tok_LDELEM; i += 6;
									break;
								}
							}
						}
					}
					break;
				case 'F':
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'D' ){
							if( at(str,len,i+5) == 'A' ){
								res = Tok_LDFLDA; i += 6;
							} else {
								res = Tok_LDFLD; i += 5;
							}
						}
					}
					break;
				case 'I':
					if( at(str,len,i+3) == 'N' ){
						if( at(str,len,i+4) == 'D' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case 'I':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_LDIND_I1; i += 8;
										break;
									case '2':
										res = Tok_LDIND_I2; i += 8;
										break;
									case '4':
										res = Tok_LDIND_I4; i += 8;
										break;
									case '8':
										res = Tok_LDIND_I8; i += 8;
										break;
									case 'P':
										if( at(str,len,i+8) == 'P' ){
											res = Tok_LDIND_IPP; i += 9;
										} else {
											res = Tok_LDIND_IP; i += 8;
										}
										break;
									}
									break;
								case 'R':
									switch( at(str,len,i+7) ){
									case '4':
										res = Tok_LDIND_R4; i += 8;
										break;
									case '8':
										res = Tok_LDIND_R8; i += 8;
										break;
									}
									break;
								case 'U':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_LDIND_U1; i += 8;
										break;
									case '2':
										res = Tok_LDIND_U2; i += 8;
										break;
									case '4':
										res = Tok_LDIND_U4; i += 8;
										break;
									case '8':
										res = Tok_LDIND_U8; i += 8;
										break;
									}
									break;
								}
							} else {
								res = Tok_LDIND; i += 5;
							}
						}
					}
					break;
				case 'L':
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'C' ){
							switch( at(str,len,i+5) ){
							case 'A':
								if( at(str,len,i+6) == '_' ){
									if( at(str,len,i+7) == 'S' ){
										res = Tok_LDLOCA_S; i += 8;
									}
								} else {
									res = Tok_LDLOCA; i += 6;
								}
								break;
							case '_':
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_LDLOC_0; i += 7;
									break;
								case '1':
									res = Tok_LDLOC_1; i += 7;
									break;
								case '2':
									res = Tok_LDLOC_2; i += 7;
									break;
								case '3':
									res = Tok_LDLOC_3; i += 7;
									break;
								case 'S':
									res = Tok_LDLOC_S; i += 7;
									break;
								}
								break;
							default:
								res = Tok_LDLOC; i += 5;
								break;
							}
						}
					}
					break;
				case 'M':
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'T' ){
							if( at(str,len,i+5) == 'H' ){
								res = Tok_LDMETH; i += 6;
							}
						}
					}
					break;
				case 'N':
					if( at(str,len,i+3) == 'U' ){
						if( at(str,len,i+4) == 'L' ){
							if( at(str,len,i+5) == 'L' ){
								res = Tok_LDNULL; i += 6;
							}
						}
					}
					break;
				case 'P':
					if( at(str,len,i+3) == 'R' ){
						if( at(str,len,i+4) == 'O' ){
							if( at(str,len,i+5) == 'C' ){
								res = Tok_LDPROC; i += 6;
							}
						}
					}
					break;
				case 'S':
					if( at(str,len,i+3) == 'T' ){
						if( at(str,len,i+4) == 'R' ){
							res = Tok_LDSTR; i += 5;
						}
					}
					break;
				case 'V':
					if( at(str,len,i+3) == 'A' ){
						if( at(str,len,i+4) == 'R' ){
							if( at(str,len,i+5) == 'A' ){
								res = Tok_LDVARA; i += 6;
							} else {
								res = Tok_LDVAR; i += 5;
							}
						}
					}
					break;
				}
				break;
			case 'I':
				if( at(str,len,i+2) == 'N' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_LINE; i += 4;
					}
				}
				break;
			case 'O':
				if( at(str,len,i+2) == 'O' ){
					if( at(str,len,i+3) == 'P' ){
						res = Tok_LOOP; i += 4;
					}
				}
				break;
			}
			break;
		case 'M':
			switch( at(str,len,i+1) ){
			case 'O':
				if( at(str,len,i+2) == 'D' ){
					if( at(str,len,i+3) == 'U' ){
						if( at(str,len,i+4) == 'L' ){
							if( at(str,len,i+5) == 'E' ){
								res = Tok_MODULE; i += 6;
							}
						}
					}
				}
				break;
			case 'U':
				if( at(str,len,i+2) == 'L' ){
					res = Tok_MUL; i += 3;
				}
				break;
			}
			break;
		case 'N':
			switch( at(str,len,i+1) ){
			case 'E':
				switch( at(str,len,i+2) ){
				case 'G':
					res = Tok_NEG; i += 3;
					break;
				case 'W':
					switch( at(str,len,i+3) ){
					case 'A':
						if( at(str,len,i+4) == 'R' ){
							if( at(str,len,i+5) == 'R' ){
								res = Tok_NEWARR; i += 6;
							}
						}
						break;
					case 'O':
						if( at(str,len,i+4) == 'B' ){
							if( at(str,len,i+5) == 'J' ){
								res = Tok_NEWOBJ; i += 6;
							}
						}
						break;
					case 'V':
						if( at(str,len,i+4) == 'L' ){
							if( at(str,len,i+5) == 'A' ){
								res = Tok_NEWVLA; i += 6;
							}
						}
						break;
					}
					break;
				}
				break;
			case 'O':
				switch( at(str,len,i+2) ){
				case 'P':
					res = Tok_NOP; i += 3;
					break;
				case 'T':
					res = Tok_NOT; i += 3;
					break;
				}
				break;
			}
			break;
		case 'O':
			switch( at(str,len,i+1) ){
			case 'B':
				if( at(str,len,i+2) == 'J' ){
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_OBJECT; i += 6;
							}
						}
					}
				}
				break;
			case 'F':
				res = Tok_OF; i += 2;
				break;
			case 'R':
				res = Tok_OR; i += 2;
				break;
			}
			break;
		case 'P':
			switch( at(str,len,i+1) ){
			case 'O':
				switch( at(str,len,i+2) ){
				case 'I':
					if( at(str,len,i+3) == 'N' ){
						if( at(str,len,i+4) == 'T' ){
							if( at(str,len,i+5) == 'E' ){
								if( at(str,len,i+6) == 'R' ){
									res = Tok_POINTER; i += 7;
								}
							}
						}
					}
					break;
				case 'P':
					res = Tok_POP; i += 3;
					break;
				}
				break;
			case 'R':
				if( at(str,len,i+2) == 'O' ){
					if( at(str,len,i+3) == 'C' ){
						if( at(str,len,i+4) == 'E' ){
							if( at(str,len,i+5) == 'D' ){
								if( at(str,len,i+6) == 'U' ){
									if( at(str,len,i+7) == 'R' ){
										if( at(str,len,i+8) == 'E' ){
											res = Tok_PROCEDURE; i += 9;
										}
									}
								}
							}
						} else {
							res = Tok_PROC; i += 4;
						}
					}
				}
				break;
			case 'T':
				if( at(str,len,i+2) == 'R' ){
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'F' ){
							if( at(str,len,i+5) == 'F' ){
								res = Tok_PTROFF; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'R':
			if( at(str,len,i+1) == 'E' ){
				switch( at(str,len,i+2) ){
				case 'M':
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'U' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_REM_UN; i += 6;
							}
						}
					} else {
						res = Tok_REM; i += 3;
					}
					break;
				case 'P':
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'A' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_REPEAT; i += 6;
							}
						}
					}
					break;
				case 'T':
					res = Tok_RET; i += 3;
					break;
				}
			}
			break;
		case 'S':
			switch( at(str,len,i+1) ){
			case 'H':
				switch( at(str,len,i+2) ){
				case 'L':
					res = Tok_SHL; i += 3;
					break;
				case 'R':
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'U' ){
							if( at(str,len,i+5) == 'N' ){
								res = Tok_SHR_UN; i += 6;
							}
						}
					} else {
						res = Tok_SHR; i += 3;
					}
					break;
				}
				break;
			case 'I':
				if( at(str,len,i+2) == 'Z' ){
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'O' ){
							if( at(str,len,i+5) == 'F' ){
								res = Tok_SIZEOF; i += 6;
							}
						}
					}
				}
				break;
			case 'O':
				if( at(str,len,i+2) == 'U' ){
					if( at(str,len,i+3) == 'R' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'E' ){
								res = Tok_SOURCE; i += 6;
							}
						}
					}
				}
				break;
			case 'T':
				switch( at(str,len,i+2) ){
				case 'A':
					if( at(str,len,i+3) == 'R' ){
						if( at(str,len,i+4) == 'G' ){
							if( at(str,len,i+5) == '_' ){
								if( at(str,len,i+6) == 'S' ){
									res = Tok_STARG_S; i += 7;
								}
							} else {
								res = Tok_STARG; i += 5;
							}
						}
					}
					break;
				case 'E':
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'E' ){
							if( at(str,len,i+5) == 'M' ){
								if( at(str,len,i+6) == '_' ){
									switch( at(str,len,i+7) ){
									case 'I':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_STELEM_I1; i += 9;
											break;
										case '2':
											res = Tok_STELEM_I2; i += 9;
											break;
										case '4':
											res = Tok_STELEM_I4; i += 9;
											break;
										case '8':
											res = Tok_STELEM_I8; i += 9;
											break;
										case 'P':
											if( at(str,len,i+9) == 'P' ){
												res = Tok_STELEM_IPP; i += 10;
											} else {
												res = Tok_STELEM_IP; i += 9;
											}
											break;
										}
										break;
									case 'R':
										switch( at(str,len,i+8) ){
										case '4':
											res = Tok_STELEM_R4; i += 9;
											break;
										case '8':
											res = Tok_STELEM_R8; i += 9;
											break;
										}
										break;
									}
								} else {
									res = Tok_STELEM; i += 6;
								}
							}
						}
					}
					break;
				case 'F':
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'D' ){
							res = Tok_STFLD; i += 5;
						}
					}
					break;
				case 'I':
					if( at(str,len,i+3) == 'N' ){
						if( at(str,len,i+4) == 'D' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case 'I':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_STIND_I1; i += 8;
										break;
									case '2':
										res = Tok_STIND_I2; i += 8;
										break;
									case '4':
										res = Tok_STIND_I4; i += 8;
										break;
									case '8':
										res = Tok_STIND_I8; i += 8;
										break;
									case 'P':
										if( at(str,len,i+8) == 'P' ){
											res = Tok_STIND_IPP; i += 9;
										} else {
											res = Tok_STIND_IP; i += 8;
										}
										break;
									}
									break;
								case 'R':
									switch( at(str,len,i+7) ){
									case '4':
										res = Tok_STIND_R4; i += 8;
										break;
									case '8':
										res = Tok_STIND_R8; i += 8;
										break;
									}
									break;
								}
							} else {
								res = Tok_STIND; i += 5;
							}
						}
					}
					break;
				case 'L':
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_STLOC_0; i += 7;
									break;
								case '1':
									res = Tok_STLOC_1; i += 7;
									break;
								case '2':
									res = Tok_STLOC_2; i += 7;
									break;
								case '3':
									res = Tok_STLOC_3; i += 7;
									break;
								case 'S':
									res = Tok_STLOC_S; i += 7;
									break;
								}
							} else {
								res = Tok_STLOC; i += 5;
							}
						}
					}
					break;
				case 'R':
					switch( at(str,len,i+3) ){
					case 'C':
						if( at(str,len,i+4) == 'P' ){
							if( at(str,len,i+5) == 'Y' ){
								res = Tok_STRCPY; i += 6;
							}
						}
						break;
					case 'U':
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_STRUCT; i += 6;
							}
						}
						break;
					}
					break;
				case 'V':
					if( at(str,len,i+3) == 'A' ){
						if( at(str,len,i+4) == 'R' ){
							res = Tok_STVAR; i += 5;
						}
					}
					break;
				}
				break;
			case 'U':
				if( at(str,len,i+2) == 'B' ){
					res = Tok_SUB; i += 3;
				}
				break;
			case 'W':
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'T' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'H' ){
								res = Tok_SWITCH; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'T':
			switch( at(str,len,i+1) ){
			case 'H':
				if( at(str,len,i+2) == 'E' ){
					if( at(str,len,i+3) == 'N' ){
						res = Tok_THEN; i += 4;
					}
				}
				break;
			case 'O':
				res = Tok_TO; i += 2;
				break;
			case 'Y':
				if( at(str,len,i+2) == 'P' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_TYPE; i += 4;
					}
				}
				break;
			}
			break;
		case 'U':
			if( at(str,len,i+1) == 'N' ){
				switch( at(str,len,i+2) ){
				case 'I':
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'N' ){
							res = Tok_UNION; i += 5;
						}
					}
					break;
				case 'T':
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'L' ){
							res = Tok_UNTIL; i += 5;
						}
					}
					break;
				}
			}
			break;
		case 'V':
			if( at(str,len,i+1) == 'A' ){
				if( at(str,len,i+2) == 'R' ){
					res = Tok_VAR; i += 3;
				}
			}
			break;
		case 'W':
			if( at(str,len,i+1) == 'H' ){
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'E' ){
							res = Tok_WHILE; i += 5;
						}
					}
				}
			}
			break;
		case 'X':
			if( at(str,len,i+1) == 'O' ){
				if( at(str,len,i+2) == 'R' ){
					res = Tok_XOR; i += 3;
				}
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			res = Tok_Hat; i += 1;
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
