// This file was automatically generated by EbnfStudio; don't modify it!
#include "MilTokenType.h"

namespace Mil {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Dlr: return "$";
			case Tok_Lpar: return "(";
			case Tok_Latt: return "(*";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Ratt: return "*)";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_Dot: return ".";
			case Tok_2Dot: return "..";
			case Tok_2Slash: return "//";
			case Tok_Colon: return ":";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Eq: return "=";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_ARRAY: return "ARRAY";
			case Tok_BEGIN: return "BEGIN";
			case Tok_CASE: return "CASE";
			case Tok_DO: return "DO";
			case Tok_ELSE: return "ELSE";
			case Tok_END: return "END";
			case Tok_IF: return "IF";
			case Tok_IMPORT: return "IMPORT";
			case Tok_INLINE: return "INLINE";
			case Tok_LOOP: return "LOOP";
			case Tok_MODULE: return "MODULE";
			case Tok_OF: return "OF";
			case Tok_POINTER: return "POINTER";
			case Tok_PROC: return "PROC";
			case Tok_PROCEDURE: return "PROCEDURE";
			case Tok_REPEAT: return "REPEAT";
			case Tok_STRUCT: return "STRUCT";
			case Tok_SWITCH: return "SWITCH";
			case Tok_THEN: return "THEN";
			case Tok_TO: return "TO";
			case Tok_TYPE: return "TYPE";
			case Tok_UNION: return "UNION";
			case Tok_UNTIL: return "UNTIL";
			case Tok_VAR: return "VAR";
			case Tok_WHILE: return "WHILE";
			case Tok_add: return "add";
			case Tok_and: return "and";
			case Tok_call: return "call";
			case Tok_calli: return "calli";
			case Tok_castptr: return "castptr";
			case Tok_ceq: return "ceq";
			case Tok_cgt: return "cgt";
			case Tok_cgt_un: return "cgt_un";
			case Tok_clt: return "clt";
			case Tok_clt_un: return "clt_un";
			case Tok_conv_i1: return "conv_i1";
			case Tok_conv_i2: return "conv_i2";
			case Tok_conv_i4: return "conv_i4";
			case Tok_conv_i8: return "conv_i8";
			case Tok_conv_ip: return "conv_ip";
			case Tok_conv_r4: return "conv_r4";
			case Tok_conv_r8: return "conv_r8";
			case Tok_conv_u1: return "conv_u1";
			case Tok_conv_u2: return "conv_u2";
			case Tok_conv_u4: return "conv_u4";
			case Tok_conv_u8: return "conv_u8";
			case Tok_disp: return "disp";
			case Tok_div: return "div";
			case Tok_dup: return "dup";
			case Tok_exit: return "exit";
			case Tok_goto: return "goto";
			case Tok_label: return "label";
			case Tok_ldarg: return "ldarg";
			case Tok_ldarg_0: return "ldarg_0";
			case Tok_ldarg_1: return "ldarg_1";
			case Tok_ldarg_2: return "ldarg_2";
			case Tok_ldarg_3: return "ldarg_3";
			case Tok_ldarg_s: return "ldarg_s";
			case Tok_ldarga: return "ldarga";
			case Tok_ldarga_s: return "ldarga_s";
			case Tok_ldc_i4: return "ldc_i4";
			case Tok_ldc_i4_0: return "ldc_i4_0";
			case Tok_ldc_i4_1: return "ldc_i4_1";
			case Tok_ldc_i4_2: return "ldc_i4_2";
			case Tok_ldc_i4_3: return "ldc_i4_3";
			case Tok_ldc_i4_4: return "ldc_i4_4";
			case Tok_ldc_i4_5: return "ldc_i4_5";
			case Tok_ldc_i4_6: return "ldc_i4_6";
			case Tok_ldc_i4_7: return "ldc_i4_7";
			case Tok_ldc_i4_8: return "ldc_i4_8";
			case Tok_ldc_i4_m1: return "ldc_i4_m1";
			case Tok_ldc_i4_s: return "ldc_i4_s";
			case Tok_ldc_i8: return "ldc_i8";
			case Tok_ldc_r4: return "ldc_r4";
			case Tok_ldc_r8: return "ldc_r8";
			case Tok_ldelem: return "ldelem";
			case Tok_ldelem_i1: return "ldelem_i1";
			case Tok_ldelem_i2: return "ldelem_i2";
			case Tok_ldelem_i4: return "ldelem_i4";
			case Tok_ldelem_i8: return "ldelem_i8";
			case Tok_ldelem_ip: return "ldelem_ip";
			case Tok_ldelem_r4: return "ldelem_r4";
			case Tok_ldelem_r8: return "ldelem_r8";
			case Tok_ldelem_u1: return "ldelem_u1";
			case Tok_ldelem_u2: return "ldelem_u2";
			case Tok_ldelem_u4: return "ldelem_u4";
			case Tok_ldelem_u8: return "ldelem_u8";
			case Tok_ldelema: return "ldelema";
			case Tok_ldfld: return "ldfld";
			case Tok_ldflda: return "ldflda";
			case Tok_ldftn: return "ldftn";
			case Tok_ldind_i1: return "ldind_i1";
			case Tok_ldind_i2: return "ldind_i2";
			case Tok_ldind_i4: return "ldind_i4";
			case Tok_ldind_i8: return "ldind_i8";
			case Tok_ldind_ip: return "ldind_ip";
			case Tok_ldind_r4: return "ldind_r4";
			case Tok_ldind_r8: return "ldind_r8";
			case Tok_ldind_u1: return "ldind_u1";
			case Tok_ldind_u2: return "ldind_u2";
			case Tok_ldind_u4: return "ldind_u4";
			case Tok_ldind_u8: return "ldind_u8";
			case Tok_ldloc: return "ldloc";
			case Tok_ldloc_0: return "ldloc_0";
			case Tok_ldloc_1: return "ldloc_1";
			case Tok_ldloc_2: return "ldloc_2";
			case Tok_ldloc_3: return "ldloc_3";
			case Tok_ldloc_s: return "ldloc_s";
			case Tok_ldloca: return "ldloca";
			case Tok_ldloca_s: return "ldloca_s";
			case Tok_ldnull: return "ldnull";
			case Tok_ldobj: return "ldobj";
			case Tok_ldproc: return "ldproc";
			case Tok_ldstr: return "ldstr";
			case Tok_ldvar: return "ldvar";
			case Tok_ldvara: return "ldvara";
			case Tok_line: return "line";
			case Tok_mul: return "mul";
			case Tok_neg: return "neg";
			case Tok_newarr: return "newarr";
			case Tok_newobj: return "newobj";
			case Tok_newvla: return "newvla";
			case Tok_not: return "not";
			case Tok_or: return "or";
			case Tok_pop: return "pop";
			case Tok_rem: return "rem";
			case Tok_ret: return "ret";
			case Tok_shl: return "shl";
			case Tok_shr: return "shr";
			case Tok_shr_un: return "shr_un";
			case Tok_starg: return "starg";
			case Tok_starg_s: return "starg_s";
			case Tok_stelem: return "stelem";
			case Tok_stelem_i1: return "stelem_i1";
			case Tok_stelem_i2: return "stelem_i2";
			case Tok_stelem_i4: return "stelem_i4";
			case Tok_stelem_i8: return "stelem_i8";
			case Tok_stelem_ip: return "stelem_ip";
			case Tok_stelem_r4: return "stelem_r4";
			case Tok_stelem_r8: return "stelem_r8";
			case Tok_stfld: return "stfld";
			case Tok_stind_i1: return "stind_i1";
			case Tok_stind_i2: return "stind_i2";
			case Tok_stind_i4: return "stind_i4";
			case Tok_stind_i8: return "stind_i8";
			case Tok_stind_ip: return "stind_ip";
			case Tok_stind_r4: return "stind_r4";
			case Tok_stind_r8: return "stind_r8";
			case Tok_stloc: return "stloc";
			case Tok_stloc_0: return "stloc_0";
			case Tok_stloc_1: return "stloc_1";
			case Tok_stloc_2: return "stloc_2";
			case Tok_stloc_3: return "stloc_3";
			case Tok_stloc_s: return "stloc_s";
			case Tok_stobj: return "stobj";
			case Tok_stvar: return "stvar";
			case Tok_sub: return "sub";
			case Tok_xor: return "xor";
			case Tok_ident: return "ident";
			case Tok_unsigned: return "unsigned";
			case Tok_real: return "real";
			case Tok_string: return "string";
			case Tok_hexstring: return "hexstring";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Dlr: return "Tok_Dlr";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Latt: return "Tok_Latt";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Ratt: return "Tok_Ratt";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_Dot: return "Tok_Dot";
			case Tok_2Dot: return "Tok_2Dot";
			case Tok_2Slash: return "Tok_2Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Eq: return "Tok_Eq";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_ARRAY: return "Tok_ARRAY";
			case Tok_BEGIN: return "Tok_BEGIN";
			case Tok_CASE: return "Tok_CASE";
			case Tok_DO: return "Tok_DO";
			case Tok_ELSE: return "Tok_ELSE";
			case Tok_END: return "Tok_END";
			case Tok_IF: return "Tok_IF";
			case Tok_IMPORT: return "Tok_IMPORT";
			case Tok_INLINE: return "Tok_INLINE";
			case Tok_LOOP: return "Tok_LOOP";
			case Tok_MODULE: return "Tok_MODULE";
			case Tok_OF: return "Tok_OF";
			case Tok_POINTER: return "Tok_POINTER";
			case Tok_PROC: return "Tok_PROC";
			case Tok_PROCEDURE: return "Tok_PROCEDURE";
			case Tok_REPEAT: return "Tok_REPEAT";
			case Tok_STRUCT: return "Tok_STRUCT";
			case Tok_SWITCH: return "Tok_SWITCH";
			case Tok_THEN: return "Tok_THEN";
			case Tok_TO: return "Tok_TO";
			case Tok_TYPE: return "Tok_TYPE";
			case Tok_UNION: return "Tok_UNION";
			case Tok_UNTIL: return "Tok_UNTIL";
			case Tok_VAR: return "Tok_VAR";
			case Tok_WHILE: return "Tok_WHILE";
			case Tok_add: return "Tok_add";
			case Tok_and: return "Tok_and";
			case Tok_call: return "Tok_call";
			case Tok_calli: return "Tok_calli";
			case Tok_castptr: return "Tok_castptr";
			case Tok_ceq: return "Tok_ceq";
			case Tok_cgt: return "Tok_cgt";
			case Tok_cgt_un: return "Tok_cgt_un";
			case Tok_clt: return "Tok_clt";
			case Tok_clt_un: return "Tok_clt_un";
			case Tok_conv_i1: return "Tok_conv_i1";
			case Tok_conv_i2: return "Tok_conv_i2";
			case Tok_conv_i4: return "Tok_conv_i4";
			case Tok_conv_i8: return "Tok_conv_i8";
			case Tok_conv_ip: return "Tok_conv_ip";
			case Tok_conv_r4: return "Tok_conv_r4";
			case Tok_conv_r8: return "Tok_conv_r8";
			case Tok_conv_u1: return "Tok_conv_u1";
			case Tok_conv_u2: return "Tok_conv_u2";
			case Tok_conv_u4: return "Tok_conv_u4";
			case Tok_conv_u8: return "Tok_conv_u8";
			case Tok_disp: return "Tok_disp";
			case Tok_div: return "Tok_div";
			case Tok_dup: return "Tok_dup";
			case Tok_exit: return "Tok_exit";
			case Tok_goto: return "Tok_goto";
			case Tok_label: return "Tok_label";
			case Tok_ldarg: return "Tok_ldarg";
			case Tok_ldarg_0: return "Tok_ldarg_0";
			case Tok_ldarg_1: return "Tok_ldarg_1";
			case Tok_ldarg_2: return "Tok_ldarg_2";
			case Tok_ldarg_3: return "Tok_ldarg_3";
			case Tok_ldarg_s: return "Tok_ldarg_s";
			case Tok_ldarga: return "Tok_ldarga";
			case Tok_ldarga_s: return "Tok_ldarga_s";
			case Tok_ldc_i4: return "Tok_ldc_i4";
			case Tok_ldc_i4_0: return "Tok_ldc_i4_0";
			case Tok_ldc_i4_1: return "Tok_ldc_i4_1";
			case Tok_ldc_i4_2: return "Tok_ldc_i4_2";
			case Tok_ldc_i4_3: return "Tok_ldc_i4_3";
			case Tok_ldc_i4_4: return "Tok_ldc_i4_4";
			case Tok_ldc_i4_5: return "Tok_ldc_i4_5";
			case Tok_ldc_i4_6: return "Tok_ldc_i4_6";
			case Tok_ldc_i4_7: return "Tok_ldc_i4_7";
			case Tok_ldc_i4_8: return "Tok_ldc_i4_8";
			case Tok_ldc_i4_m1: return "Tok_ldc_i4_m1";
			case Tok_ldc_i4_s: return "Tok_ldc_i4_s";
			case Tok_ldc_i8: return "Tok_ldc_i8";
			case Tok_ldc_r4: return "Tok_ldc_r4";
			case Tok_ldc_r8: return "Tok_ldc_r8";
			case Tok_ldelem: return "Tok_ldelem";
			case Tok_ldelem_i1: return "Tok_ldelem_i1";
			case Tok_ldelem_i2: return "Tok_ldelem_i2";
			case Tok_ldelem_i4: return "Tok_ldelem_i4";
			case Tok_ldelem_i8: return "Tok_ldelem_i8";
			case Tok_ldelem_ip: return "Tok_ldelem_ip";
			case Tok_ldelem_r4: return "Tok_ldelem_r4";
			case Tok_ldelem_r8: return "Tok_ldelem_r8";
			case Tok_ldelem_u1: return "Tok_ldelem_u1";
			case Tok_ldelem_u2: return "Tok_ldelem_u2";
			case Tok_ldelem_u4: return "Tok_ldelem_u4";
			case Tok_ldelem_u8: return "Tok_ldelem_u8";
			case Tok_ldelema: return "Tok_ldelema";
			case Tok_ldfld: return "Tok_ldfld";
			case Tok_ldflda: return "Tok_ldflda";
			case Tok_ldftn: return "Tok_ldftn";
			case Tok_ldind_i1: return "Tok_ldind_i1";
			case Tok_ldind_i2: return "Tok_ldind_i2";
			case Tok_ldind_i4: return "Tok_ldind_i4";
			case Tok_ldind_i8: return "Tok_ldind_i8";
			case Tok_ldind_ip: return "Tok_ldind_ip";
			case Tok_ldind_r4: return "Tok_ldind_r4";
			case Tok_ldind_r8: return "Tok_ldind_r8";
			case Tok_ldind_u1: return "Tok_ldind_u1";
			case Tok_ldind_u2: return "Tok_ldind_u2";
			case Tok_ldind_u4: return "Tok_ldind_u4";
			case Tok_ldind_u8: return "Tok_ldind_u8";
			case Tok_ldloc: return "Tok_ldloc";
			case Tok_ldloc_0: return "Tok_ldloc_0";
			case Tok_ldloc_1: return "Tok_ldloc_1";
			case Tok_ldloc_2: return "Tok_ldloc_2";
			case Tok_ldloc_3: return "Tok_ldloc_3";
			case Tok_ldloc_s: return "Tok_ldloc_s";
			case Tok_ldloca: return "Tok_ldloca";
			case Tok_ldloca_s: return "Tok_ldloca_s";
			case Tok_ldnull: return "Tok_ldnull";
			case Tok_ldobj: return "Tok_ldobj";
			case Tok_ldproc: return "Tok_ldproc";
			case Tok_ldstr: return "Tok_ldstr";
			case Tok_ldvar: return "Tok_ldvar";
			case Tok_ldvara: return "Tok_ldvara";
			case Tok_line: return "Tok_line";
			case Tok_mul: return "Tok_mul";
			case Tok_neg: return "Tok_neg";
			case Tok_newarr: return "Tok_newarr";
			case Tok_newobj: return "Tok_newobj";
			case Tok_newvla: return "Tok_newvla";
			case Tok_not: return "Tok_not";
			case Tok_or: return "Tok_or";
			case Tok_pop: return "Tok_pop";
			case Tok_rem: return "Tok_rem";
			case Tok_ret: return "Tok_ret";
			case Tok_shl: return "Tok_shl";
			case Tok_shr: return "Tok_shr";
			case Tok_shr_un: return "Tok_shr_un";
			case Tok_starg: return "Tok_starg";
			case Tok_starg_s: return "Tok_starg_s";
			case Tok_stelem: return "Tok_stelem";
			case Tok_stelem_i1: return "Tok_stelem_i1";
			case Tok_stelem_i2: return "Tok_stelem_i2";
			case Tok_stelem_i4: return "Tok_stelem_i4";
			case Tok_stelem_i8: return "Tok_stelem_i8";
			case Tok_stelem_ip: return "Tok_stelem_ip";
			case Tok_stelem_r4: return "Tok_stelem_r4";
			case Tok_stelem_r8: return "Tok_stelem_r8";
			case Tok_stfld: return "Tok_stfld";
			case Tok_stind_i1: return "Tok_stind_i1";
			case Tok_stind_i2: return "Tok_stind_i2";
			case Tok_stind_i4: return "Tok_stind_i4";
			case Tok_stind_i8: return "Tok_stind_i8";
			case Tok_stind_ip: return "Tok_stind_ip";
			case Tok_stind_r4: return "Tok_stind_r4";
			case Tok_stind_r8: return "Tok_stind_r8";
			case Tok_stloc: return "Tok_stloc";
			case Tok_stloc_0: return "Tok_stloc_0";
			case Tok_stloc_1: return "Tok_stloc_1";
			case Tok_stloc_2: return "Tok_stloc_2";
			case Tok_stloc_3: return "Tok_stloc_3";
			case Tok_stloc_s: return "Tok_stloc_s";
			case Tok_stobj: return "Tok_stobj";
			case Tok_stvar: return "Tok_stvar";
			case Tok_sub: return "Tok_sub";
			case Tok_xor: return "Tok_xor";
			case Tok_ident: return "Tok_ident";
			case Tok_unsigned: return "Tok_unsigned";
			case Tok_real: return "Tok_real";
			case Tok_string: return "Tok_string";
			case Tok_hexstring: return "Tok_hexstring";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const char* str, quint32 len, int i ){
		return ( i < len ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		return tokenTypeFromString(str.constData(),str.size(),pos);
	}
	TokenType tokenTypeFromString( const char* str, quint32 len, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,len,i) ){
		case '$':
			res = Tok_Dlr; i += 1;
			break;
		case '(':
			if( at(str,len,i+1) == '*' ){
				res = Tok_Latt; i += 2;
			} else {
				res = Tok_Lpar; i += 1;
			}
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			if( at(str,len,i+1) == ')' ){
				res = Tok_Ratt; i += 2;
			} else {
				res = Tok_Star; i += 1;
			}
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			res = Tok_Minus; i += 1;
			break;
		case '.':
			if( at(str,len,i+1) == '.' ){
				res = Tok_2Dot; i += 2;
			} else {
				res = Tok_Dot; i += 1;
			}
			break;
		case '/':
			if( at(str,len,i+1) == '/' ){
				res = Tok_2Slash; i += 2;
			}
			break;
		case ':':
			if( at(str,len,i+1) == '=' ){
				res = Tok_ColonEq; i += 2;
			} else {
				res = Tok_Colon; i += 1;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '=':
			res = Tok_Eq; i += 1;
			break;
		case 'A':
			if( at(str,len,i+1) == 'R' ){
				if( at(str,len,i+2) == 'R' ){
					if( at(str,len,i+3) == 'A' ){
						if( at(str,len,i+4) == 'Y' ){
							res = Tok_ARRAY; i += 5;
						}
					}
				}
			}
			break;
		case 'B':
			if( at(str,len,i+1) == 'E' ){
				if( at(str,len,i+2) == 'G' ){
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'N' ){
							res = Tok_BEGIN; i += 5;
						}
					}
				}
			}
			break;
		case 'C':
			if( at(str,len,i+1) == 'A' ){
				if( at(str,len,i+2) == 'S' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_CASE; i += 4;
					}
				}
			}
			break;
		case 'D':
			if( at(str,len,i+1) == 'O' ){
				res = Tok_DO; i += 2;
			}
			break;
		case 'E':
			switch( at(str,len,i+1) ){
			case 'L':
				if( at(str,len,i+2) == 'S' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_ELSE; i += 4;
					}
				}
				break;
			case 'N':
				if( at(str,len,i+2) == 'D' ){
					res = Tok_END; i += 3;
				}
				break;
			}
			break;
		case 'I':
			switch( at(str,len,i+1) ){
			case 'F':
				res = Tok_IF; i += 2;
				break;
			case 'M':
				if( at(str,len,i+2) == 'P' ){
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'R' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_IMPORT; i += 6;
							}
						}
					}
				}
				break;
			case 'N':
				if( at(str,len,i+2) == 'L' ){
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'N' ){
							if( at(str,len,i+5) == 'E' ){
								res = Tok_INLINE; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'L':
			if( at(str,len,i+1) == 'O' ){
				if( at(str,len,i+2) == 'O' ){
					if( at(str,len,i+3) == 'P' ){
						res = Tok_LOOP; i += 4;
					}
				}
			}
			break;
		case 'M':
			if( at(str,len,i+1) == 'O' ){
				if( at(str,len,i+2) == 'D' ){
					if( at(str,len,i+3) == 'U' ){
						if( at(str,len,i+4) == 'L' ){
							if( at(str,len,i+5) == 'E' ){
								res = Tok_MODULE; i += 6;
							}
						}
					}
				}
			}
			break;
		case 'O':
			if( at(str,len,i+1) == 'F' ){
				res = Tok_OF; i += 2;
			}
			break;
		case 'P':
			switch( at(str,len,i+1) ){
			case 'O':
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'N' ){
						if( at(str,len,i+4) == 'T' ){
							if( at(str,len,i+5) == 'E' ){
								if( at(str,len,i+6) == 'R' ){
									res = Tok_POINTER; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'R':
				if( at(str,len,i+2) == 'O' ){
					if( at(str,len,i+3) == 'C' ){
						if( at(str,len,i+4) == 'E' ){
							if( at(str,len,i+5) == 'D' ){
								if( at(str,len,i+6) == 'U' ){
									if( at(str,len,i+7) == 'R' ){
										if( at(str,len,i+8) == 'E' ){
											res = Tok_PROCEDURE; i += 9;
										}
									}
								}
							}
						} else {
							res = Tok_PROC; i += 4;
						}
					}
				}
				break;
			}
			break;
		case 'R':
			if( at(str,len,i+1) == 'E' ){
				if( at(str,len,i+2) == 'P' ){
					if( at(str,len,i+3) == 'E' ){
						if( at(str,len,i+4) == 'A' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_REPEAT; i += 6;
							}
						}
					}
				}
			}
			break;
		case 'S':
			switch( at(str,len,i+1) ){
			case 'T':
				if( at(str,len,i+2) == 'R' ){
					if( at(str,len,i+3) == 'U' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'T' ){
								res = Tok_STRUCT; i += 6;
							}
						}
					}
				}
				break;
			case 'W':
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'T' ){
						if( at(str,len,i+4) == 'C' ){
							if( at(str,len,i+5) == 'H' ){
								res = Tok_SWITCH; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'T':
			switch( at(str,len,i+1) ){
			case 'H':
				if( at(str,len,i+2) == 'E' ){
					if( at(str,len,i+3) == 'N' ){
						res = Tok_THEN; i += 4;
					}
				}
				break;
			case 'O':
				res = Tok_TO; i += 2;
				break;
			case 'Y':
				if( at(str,len,i+2) == 'P' ){
					if( at(str,len,i+3) == 'E' ){
						res = Tok_TYPE; i += 4;
					}
				}
				break;
			}
			break;
		case 'U':
			if( at(str,len,i+1) == 'N' ){
				switch( at(str,len,i+2) ){
				case 'I':
					if( at(str,len,i+3) == 'O' ){
						if( at(str,len,i+4) == 'N' ){
							res = Tok_UNION; i += 5;
						}
					}
					break;
				case 'T':
					if( at(str,len,i+3) == 'I' ){
						if( at(str,len,i+4) == 'L' ){
							res = Tok_UNTIL; i += 5;
						}
					}
					break;
				}
			}
			break;
		case 'V':
			if( at(str,len,i+1) == 'A' ){
				if( at(str,len,i+2) == 'R' ){
					res = Tok_VAR; i += 3;
				}
			}
			break;
		case 'W':
			if( at(str,len,i+1) == 'H' ){
				if( at(str,len,i+2) == 'I' ){
					if( at(str,len,i+3) == 'L' ){
						if( at(str,len,i+4) == 'E' ){
							res = Tok_WHILE; i += 5;
						}
					}
				}
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			res = Tok_Hat; i += 1;
			break;
		case 'a':
			switch( at(str,len,i+1) ){
			case 'd':
				if( at(str,len,i+2) == 'd' ){
					res = Tok_add; i += 3;
				}
				break;
			case 'n':
				if( at(str,len,i+2) == 'd' ){
					res = Tok_and; i += 3;
				}
				break;
			}
			break;
		case 'c':
			switch( at(str,len,i+1) ){
			case 'a':
				switch( at(str,len,i+2) ){
				case 'l':
					if( at(str,len,i+3) == 'l' ){
						if( at(str,len,i+4) == 'i' ){
							res = Tok_calli; i += 5;
						} else {
							res = Tok_call; i += 4;
						}
					}
					break;
				case 's':
					if( at(str,len,i+3) == 't' ){
						if( at(str,len,i+4) == 'p' ){
							if( at(str,len,i+5) == 't' ){
								if( at(str,len,i+6) == 'r' ){
									res = Tok_castptr; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'e':
				if( at(str,len,i+2) == 'q' ){
					res = Tok_ceq; i += 3;
				}
				break;
			case 'g':
				if( at(str,len,i+2) == 't' ){
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'u' ){
							if( at(str,len,i+5) == 'n' ){
								res = Tok_cgt_un; i += 6;
							}
						}
					} else {
						res = Tok_cgt; i += 3;
					}
				}
				break;
			case 'l':
				if( at(str,len,i+2) == 't' ){
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'u' ){
							if( at(str,len,i+5) == 'n' ){
								res = Tok_clt_un; i += 6;
							}
						}
					} else {
						res = Tok_clt; i += 3;
					}
				}
				break;
			case 'o':
				if( at(str,len,i+2) == 'n' ){
					if( at(str,len,i+3) == 'v' ){
						if( at(str,len,i+4) == '_' ){
							switch( at(str,len,i+5) ){
							case 'i':
								switch( at(str,len,i+6) ){
								case '1':
									res = Tok_conv_i1; i += 7;
									break;
								case '2':
									res = Tok_conv_i2; i += 7;
									break;
								case '4':
									res = Tok_conv_i4; i += 7;
									break;
								case '8':
									res = Tok_conv_i8; i += 7;
									break;
								case 'p':
									res = Tok_conv_ip; i += 7;
									break;
								}
								break;
							case 'r':
								switch( at(str,len,i+6) ){
								case '4':
									res = Tok_conv_r4; i += 7;
									break;
								case '8':
									res = Tok_conv_r8; i += 7;
									break;
								}
								break;
							case 'u':
								switch( at(str,len,i+6) ){
								case '1':
									res = Tok_conv_u1; i += 7;
									break;
								case '2':
									res = Tok_conv_u2; i += 7;
									break;
								case '4':
									res = Tok_conv_u4; i += 7;
									break;
								case '8':
									res = Tok_conv_u8; i += 7;
									break;
								}
								break;
							}
						}
					}
				}
				break;
			}
			break;
		case 'd':
			switch( at(str,len,i+1) ){
			case 'i':
				switch( at(str,len,i+2) ){
				case 's':
					if( at(str,len,i+3) == 'p' ){
						res = Tok_disp; i += 4;
					}
					break;
				case 'v':
					res = Tok_div; i += 3;
					break;
				}
				break;
			case 'u':
				if( at(str,len,i+2) == 'p' ){
					res = Tok_dup; i += 3;
				}
				break;
			}
			break;
		case 'e':
			if( at(str,len,i+1) == 'x' ){
				if( at(str,len,i+2) == 'i' ){
					if( at(str,len,i+3) == 't' ){
						res = Tok_exit; i += 4;
					}
				}
			}
			break;
		case 'g':
			if( at(str,len,i+1) == 'o' ){
				if( at(str,len,i+2) == 't' ){
					if( at(str,len,i+3) == 'o' ){
						res = Tok_goto; i += 4;
					}
				}
			}
			break;
		case 'l':
			switch( at(str,len,i+1) ){
			case 'a':
				if( at(str,len,i+2) == 'b' ){
					if( at(str,len,i+3) == 'e' ){
						if( at(str,len,i+4) == 'l' ){
							res = Tok_label; i += 5;
						}
					}
				}
				break;
			case 'd':
				switch( at(str,len,i+2) ){
				case 'a':
					if( at(str,len,i+3) == 'r' ){
						if( at(str,len,i+4) == 'g' ){
							switch( at(str,len,i+5) ){
							case '_':
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_ldarg_0; i += 7;
									break;
								case '1':
									res = Tok_ldarg_1; i += 7;
									break;
								case '2':
									res = Tok_ldarg_2; i += 7;
									break;
								case '3':
									res = Tok_ldarg_3; i += 7;
									break;
								case 's':
									res = Tok_ldarg_s; i += 7;
									break;
								}
								break;
							case 'a':
								if( at(str,len,i+6) == '_' ){
									if( at(str,len,i+7) == 's' ){
										res = Tok_ldarga_s; i += 8;
									}
								} else {
									res = Tok_ldarga; i += 6;
								}
								break;
							default:
								res = Tok_ldarg; i += 5;
								break;
							}
						}
					}
					break;
				case 'c':
					if( at(str,len,i+3) == '_' ){
						switch( at(str,len,i+4) ){
						case 'i':
							switch( at(str,len,i+5) ){
							case '4':
								if( at(str,len,i+6) == '_' ){
									switch( at(str,len,i+7) ){
									case '0':
										res = Tok_ldc_i4_0; i += 8;
										break;
									case '1':
										res = Tok_ldc_i4_1; i += 8;
										break;
									case '2':
										res = Tok_ldc_i4_2; i += 8;
										break;
									case '3':
										res = Tok_ldc_i4_3; i += 8;
										break;
									case '4':
										res = Tok_ldc_i4_4; i += 8;
										break;
									case '5':
										res = Tok_ldc_i4_5; i += 8;
										break;
									case '6':
										res = Tok_ldc_i4_6; i += 8;
										break;
									case '7':
										res = Tok_ldc_i4_7; i += 8;
										break;
									case '8':
										res = Tok_ldc_i4_8; i += 8;
										break;
									case 'm':
										if( at(str,len,i+8) == '1' ){
											res = Tok_ldc_i4_m1; i += 9;
										}
										break;
									case 's':
										res = Tok_ldc_i4_s; i += 8;
										break;
									}
								} else {
									res = Tok_ldc_i4; i += 6;
								}
								break;
							case '8':
								res = Tok_ldc_i8; i += 6;
								break;
							}
							break;
						case 'r':
							switch( at(str,len,i+5) ){
							case '4':
								res = Tok_ldc_r4; i += 6;
								break;
							case '8':
								res = Tok_ldc_r8; i += 6;
								break;
							}
							break;
						}
					}
					break;
				case 'e':
					if( at(str,len,i+3) == 'l' ){
						if( at(str,len,i+4) == 'e' ){
							if( at(str,len,i+5) == 'm' ){
								switch( at(str,len,i+6) ){
								case '_':
									switch( at(str,len,i+7) ){
									case 'i':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_ldelem_i1; i += 9;
											break;
										case '2':
											res = Tok_ldelem_i2; i += 9;
											break;
										case '4':
											res = Tok_ldelem_i4; i += 9;
											break;
										case '8':
											res = Tok_ldelem_i8; i += 9;
											break;
										case 'p':
											res = Tok_ldelem_ip; i += 9;
											break;
										}
										break;
									case 'r':
										switch( at(str,len,i+8) ){
										case '4':
											res = Tok_ldelem_r4; i += 9;
											break;
										case '8':
											res = Tok_ldelem_r8; i += 9;
											break;
										}
										break;
									case 'u':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_ldelem_u1; i += 9;
											break;
										case '2':
											res = Tok_ldelem_u2; i += 9;
											break;
										case '4':
											res = Tok_ldelem_u4; i += 9;
											break;
										case '8':
											res = Tok_ldelem_u8; i += 9;
											break;
										}
										break;
									}
									break;
								case 'a':
									res = Tok_ldelema; i += 7;
									break;
								default:
									res = Tok_ldelem; i += 6;
									break;
								}
							}
						}
					}
					break;
				case 'f':
					switch( at(str,len,i+3) ){
					case 'l':
						if( at(str,len,i+4) == 'd' ){
							if( at(str,len,i+5) == 'a' ){
								res = Tok_ldflda; i += 6;
							} else {
								res = Tok_ldfld; i += 5;
							}
						}
						break;
					case 't':
						if( at(str,len,i+4) == 'n' ){
							res = Tok_ldftn; i += 5;
						}
						break;
					}
					break;
				case 'i':
					if( at(str,len,i+3) == 'n' ){
						if( at(str,len,i+4) == 'd' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case 'i':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_ldind_i1; i += 8;
										break;
									case '2':
										res = Tok_ldind_i2; i += 8;
										break;
									case '4':
										res = Tok_ldind_i4; i += 8;
										break;
									case '8':
										res = Tok_ldind_i8; i += 8;
										break;
									case 'p':
										res = Tok_ldind_ip; i += 8;
										break;
									}
									break;
								case 'r':
									switch( at(str,len,i+7) ){
									case '4':
										res = Tok_ldind_r4; i += 8;
										break;
									case '8':
										res = Tok_ldind_r8; i += 8;
										break;
									}
									break;
								case 'u':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_ldind_u1; i += 8;
										break;
									case '2':
										res = Tok_ldind_u2; i += 8;
										break;
									case '4':
										res = Tok_ldind_u4; i += 8;
										break;
									case '8':
										res = Tok_ldind_u8; i += 8;
										break;
									}
									break;
								}
							}
						}
					}
					break;
				case 'l':
					if( at(str,len,i+3) == 'o' ){
						if( at(str,len,i+4) == 'c' ){
							switch( at(str,len,i+5) ){
							case '_':
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_ldloc_0; i += 7;
									break;
								case '1':
									res = Tok_ldloc_1; i += 7;
									break;
								case '2':
									res = Tok_ldloc_2; i += 7;
									break;
								case '3':
									res = Tok_ldloc_3; i += 7;
									break;
								case 's':
									res = Tok_ldloc_s; i += 7;
									break;
								}
								break;
							case 'a':
								if( at(str,len,i+6) == '_' ){
									if( at(str,len,i+7) == 's' ){
										res = Tok_ldloca_s; i += 8;
									}
								} else {
									res = Tok_ldloca; i += 6;
								}
								break;
							default:
								res = Tok_ldloc; i += 5;
								break;
							}
						}
					}
					break;
				case 'n':
					if( at(str,len,i+3) == 'u' ){
						if( at(str,len,i+4) == 'l' ){
							if( at(str,len,i+5) == 'l' ){
								res = Tok_ldnull; i += 6;
							}
						}
					}
					break;
				case 'o':
					if( at(str,len,i+3) == 'b' ){
						if( at(str,len,i+4) == 'j' ){
							res = Tok_ldobj; i += 5;
						}
					}
					break;
				case 'p':
					if( at(str,len,i+3) == 'r' ){
						if( at(str,len,i+4) == 'o' ){
							if( at(str,len,i+5) == 'c' ){
								res = Tok_ldproc; i += 6;
							}
						}
					}
					break;
				case 's':
					if( at(str,len,i+3) == 't' ){
						if( at(str,len,i+4) == 'r' ){
							res = Tok_ldstr; i += 5;
						}
					}
					break;
				case 'v':
					if( at(str,len,i+3) == 'a' ){
						if( at(str,len,i+4) == 'r' ){
							if( at(str,len,i+5) == 'a' ){
								res = Tok_ldvara; i += 6;
							} else {
								res = Tok_ldvar; i += 5;
							}
						}
					}
					break;
				}
				break;
			case 'i':
				if( at(str,len,i+2) == 'n' ){
					if( at(str,len,i+3) == 'e' ){
						res = Tok_line; i += 4;
					}
				}
				break;
			}
			break;
		case 'm':
			if( at(str,len,i+1) == 'u' ){
				if( at(str,len,i+2) == 'l' ){
					res = Tok_mul; i += 3;
				}
			}
			break;
		case 'n':
			switch( at(str,len,i+1) ){
			case 'e':
				switch( at(str,len,i+2) ){
				case 'g':
					res = Tok_neg; i += 3;
					break;
				case 'w':
					switch( at(str,len,i+3) ){
					case 'a':
						if( at(str,len,i+4) == 'r' ){
							if( at(str,len,i+5) == 'r' ){
								res = Tok_newarr; i += 6;
							}
						}
						break;
					case 'o':
						if( at(str,len,i+4) == 'b' ){
							if( at(str,len,i+5) == 'j' ){
								res = Tok_newobj; i += 6;
							}
						}
						break;
					case 'v':
						if( at(str,len,i+4) == 'l' ){
							if( at(str,len,i+5) == 'a' ){
								res = Tok_newvla; i += 6;
							}
						}
						break;
					}
					break;
				}
				break;
			case 'o':
				if( at(str,len,i+2) == 't' ){
					res = Tok_not; i += 3;
				}
				break;
			}
			break;
		case 'o':
			if( at(str,len,i+1) == 'r' ){
				res = Tok_or; i += 2;
			}
			break;
		case 'p':
			if( at(str,len,i+1) == 'o' ){
				if( at(str,len,i+2) == 'p' ){
					res = Tok_pop; i += 3;
				}
			}
			break;
		case 'r':
			if( at(str,len,i+1) == 'e' ){
				switch( at(str,len,i+2) ){
				case 'm':
					res = Tok_rem; i += 3;
					break;
				case 't':
					res = Tok_ret; i += 3;
					break;
				}
			}
			break;
		case 's':
			switch( at(str,len,i+1) ){
			case 'h':
				switch( at(str,len,i+2) ){
				case 'l':
					res = Tok_shl; i += 3;
					break;
				case 'r':
					if( at(str,len,i+3) == '_' ){
						if( at(str,len,i+4) == 'u' ){
							if( at(str,len,i+5) == 'n' ){
								res = Tok_shr_un; i += 6;
							}
						}
					} else {
						res = Tok_shr; i += 3;
					}
					break;
				}
				break;
			case 't':
				switch( at(str,len,i+2) ){
				case 'a':
					if( at(str,len,i+3) == 'r' ){
						if( at(str,len,i+4) == 'g' ){
							if( at(str,len,i+5) == '_' ){
								if( at(str,len,i+6) == 's' ){
									res = Tok_starg_s; i += 7;
								}
							} else {
								res = Tok_starg; i += 5;
							}
						}
					}
					break;
				case 'e':
					if( at(str,len,i+3) == 'l' ){
						if( at(str,len,i+4) == 'e' ){
							if( at(str,len,i+5) == 'm' ){
								if( at(str,len,i+6) == '_' ){
									switch( at(str,len,i+7) ){
									case 'i':
										switch( at(str,len,i+8) ){
										case '1':
											res = Tok_stelem_i1; i += 9;
											break;
										case '2':
											res = Tok_stelem_i2; i += 9;
											break;
										case '4':
											res = Tok_stelem_i4; i += 9;
											break;
										case '8':
											res = Tok_stelem_i8; i += 9;
											break;
										case 'p':
											res = Tok_stelem_ip; i += 9;
											break;
										}
										break;
									case 'r':
										switch( at(str,len,i+8) ){
										case '4':
											res = Tok_stelem_r4; i += 9;
											break;
										case '8':
											res = Tok_stelem_r8; i += 9;
											break;
										}
										break;
									}
								} else {
									res = Tok_stelem; i += 6;
								}
							}
						}
					}
					break;
				case 'f':
					if( at(str,len,i+3) == 'l' ){
						if( at(str,len,i+4) == 'd' ){
							res = Tok_stfld; i += 5;
						}
					}
					break;
				case 'i':
					if( at(str,len,i+3) == 'n' ){
						if( at(str,len,i+4) == 'd' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case 'i':
									switch( at(str,len,i+7) ){
									case '1':
										res = Tok_stind_i1; i += 8;
										break;
									case '2':
										res = Tok_stind_i2; i += 8;
										break;
									case '4':
										res = Tok_stind_i4; i += 8;
										break;
									case '8':
										res = Tok_stind_i8; i += 8;
										break;
									case 'p':
										res = Tok_stind_ip; i += 8;
										break;
									}
									break;
								case 'r':
									switch( at(str,len,i+7) ){
									case '4':
										res = Tok_stind_r4; i += 8;
										break;
									case '8':
										res = Tok_stind_r8; i += 8;
										break;
									}
									break;
								}
							}
						}
					}
					break;
				case 'l':
					if( at(str,len,i+3) == 'o' ){
						if( at(str,len,i+4) == 'c' ){
							if( at(str,len,i+5) == '_' ){
								switch( at(str,len,i+6) ){
								case '0':
									res = Tok_stloc_0; i += 7;
									break;
								case '1':
									res = Tok_stloc_1; i += 7;
									break;
								case '2':
									res = Tok_stloc_2; i += 7;
									break;
								case '3':
									res = Tok_stloc_3; i += 7;
									break;
								case 's':
									res = Tok_stloc_s; i += 7;
									break;
								}
							} else {
								res = Tok_stloc; i += 5;
							}
						}
					}
					break;
				case 'o':
					if( at(str,len,i+3) == 'b' ){
						if( at(str,len,i+4) == 'j' ){
							res = Tok_stobj; i += 5;
						}
					}
					break;
				case 'v':
					if( at(str,len,i+3) == 'a' ){
						if( at(str,len,i+4) == 'r' ){
							res = Tok_stvar; i += 5;
						}
					}
					break;
				}
				break;
			case 'u':
				if( at(str,len,i+2) == 'b' ){
					res = Tok_sub; i += 3;
				}
				break;
			}
			break;
		case 'x':
			if( at(str,len,i+1) == 'o' ){
				if( at(str,len,i+2) == 'r' ){
					res = Tok_xor; i += 3;
				}
			}
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
