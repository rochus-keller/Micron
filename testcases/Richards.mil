// Generated by compiler  on 2025-06-03T00:43:43

module Richards
  source "/home/me/Entwicklung/Modules/Micron/testcases/Richards.mic"
  type line 15 _$1 = pointer to RBObject
  type line 14 RBObject = struct 
    line 15 next: _$1
  end
  type line 18 PacketData = array 4 of int32
  type line 22 _$2 = pointer to Packet
  type line 20 Packet = struct 
    line 21 base: RBObject
    line 22 link: _$2
    line 23 identity: int32
    line 24 kind: int32
    line 25 datum: int32
    line 26 data: PacketData
  end
  type line 29 TaskState = struct 
    line 30 base: RBObject
    line 31 packetPending: bool
    line 32 taskWaiting: bool
    line 33 taskHolding: bool
  end
  type line 38 _$3 = pointer to TaskControlBlock
  type line 41 _$4 = pointer to Packet
  type line 42 _$5 = pointer to ProcessFunction
  type line 43 _$6 = pointer to RBObject
  type line 36 TaskControlBlock = struct 
    line 37 base: TaskState
    line 38 link: _$3
    line 39 identity: int32
    line 40 priority: int32
    line 41 input: _$4
    line 42 procedure_: _$5
    line 43 handle: _$6
  end
  type line 48 _$7 = pointer to ProcessFunction
  type _$8 = pointer to Packet
  type _$9 = pointer to RBObject
  type line 36 _$10 = pointer to TaskControlBlock
  type line 48 _$11 = proc(me: _$7; work: _$8; word: _$9):_$10
  type line 46 ProcessFunction = struct 
    line 47 base: RBObject
    line 48 apply: _$11
  end
  type line 53 _$12 = pointer to Packet
  type line 51 DeviceTaskDataRecord = struct 
    line 52 base: RBObject
    line 53 pending: _$12
  end
  type line 58 _$13 = pointer to Packet
  type line 59 _$14 = pointer to Packet
  type line 56 HandlerTaskDataRecord = struct 
    line 57 base: RBObject
    line 58 workIn: _$13
    line 59 deviceIn: _$14
  end
  type line 62 IdleTaskDataRecord = struct 
    line 63 base: RBObject
    line 64 control: int32
    line 65 count: int32
  end
  type line 68 WorkerTaskDataRecord = struct 
    line 69 base: RBObject
    line 70 destination: int32
    line 71 count: int32
  end
  type line 76 _$15 = pointer to TaskControlBlock
  type line 77 _$16 = pointer to TaskControlBlock
  type line 79 _$17 = pointer to TaskControlBlock
  type _$18 = array 6 of _$17
  type line 74 Scheduler = struct 
    line 75 base: RBObject
    line 76 taskList: _$15
    line 77 currentTask: _$16
    line 78 currentTaskIdentity: int32
    line 79 taskTable: _$18
    line 80 queuePacketCount: int32
    line 81 holdCount: int32
    line 82 layout: int32
  end
  type line 87 _$19 = pointer to Scheduler
  type line 85 FP = struct 
    line 86 base: ProcessFunction
    line 87 s: _$19
  end
  type line 105 _$20 = pointer to Packet
  var NO_WORK: _$20
  type line 106 _$21 = pointer to TaskControlBlock
  var NO_TASK: _$21
  type line 107 _$22 = pointer to RBObject
  var toDelete: _$22
  var line 108 TRACING: bool
  type line 111 _$23 = pointer to Scheduler
  type line 36 _$24 = pointer to TaskControlBlock
  procedure line 111 Scheduler_markWaiting(me: _$23):_$24 forward 
  type line 112 _$25 = pointer to Scheduler
  type _$26 = pointer to Packet
  type line 36 _$27 = pointer to TaskControlBlock
  procedure line 112 Scheduler_queuePacket(me: _$25; packet: _$26):_$27 forward 
  type line 113 _$28 = pointer to Scheduler
  procedure Scheduler_trace(me: _$28; id: int32) forward 
  type line 114 _$29 = pointer to Scheduler
  type line 36 _$30 = pointer to TaskControlBlock
  procedure line 114 Scheduler_holdSelf(me: _$29):_$30 forward 
  type line 115 _$31 = pointer to Scheduler
  type line 36 _$32 = pointer to TaskControlBlock
  procedure line 115 Scheduler_release(me: _$31; identity: int32):_$32 forward 
  type line 116 _$33 = pointer to Scheduler
  procedure Scheduler_schedule(me: _$33) forward 
  type line 118 _$34 = pointer to RBObject
  procedure RBObject_init(o: _$34)
  begin
    line 120
    ldarg_0
    ldvar toDelete
    stfld RBObject.next
    line 121
    ldarg_0
    stvar toDelete
    line 122
  end RBObject_init
  type line 124 _$35 = pointer to RBObject
  procedure RBObject_delete(o: _$35)
  begin
    line 126
    if
      ldarg_0
      ldfld RBObject.next
      ldnull
      ceq
      ldc_i4_0
      ceq
    then
      line 127
      ldarg_0
      ldfld RBObject.next
      call RBObject_delete
      line 128
    end
    line 129
    ldarg_0
    free
    line 130
  end RBObject_delete
  type line 132 _$36 = pointer to Packet
  type line 20 _$37 = pointer to Packet
  type line 134 _$38 = pointer to Packet
  type line 138 _$39 = pointer to RBObject
  procedure line 132 Packet_create(link: _$36; identity: int32; kind: int32):_$37
  var me: _$38; line 135 i: int32; _$40: int32; 
  begin
    line 137
    ldloca_s 0
    newobj Packet
    stind_ip
    ldloc_0
    ldflda Packet.base
    call RBObject_init
    line 139
    ldloc_0
    ldarg_0
    stfld Packet.link
    line 140
    ldloc_0
    ldarg_1
    stfld Packet.identity
    line 141
    ldloc_0
    ldarg_2
    stfld Packet.kind
    line 142
    ldloc_0
    ldc_i4_0
    stfld Packet.datum
    line 143
    ldc_i4_0
    stloc_1
    ldc_i4_3
    stloc_2
    while
      ldloc_1
      ldloc_2
      cgt
      ldc_i4_0
      ceq
    do
      line 144
      ldloc_0
      ldflda Packet.data
      ldloc_1
      ldc_i4_0
      stelem_i4
      line 143
      ldloc_1
      ldc_i4_1
      add
      stloc_1
      line 145
    end
    line 146
    ldloc_0
    ret
    line 147
  end Packet_create
  type line 149 _$41 = pointer to Packet
  type line 18 _$42 = pointer to PacketData
  type line 151 _$43 = pointer to PacketData
  procedure line 149 Packet_getData(me: _$41):_$42
  begin
    ldarg_0
    ldflda Packet.data
    ret
    line 152
  end Packet_getData
  type line 154 _$44 = pointer to Packet
  procedure Packet_getDatum(me: _$44):int32
  begin
    line 156
    ldarg_0
    ldfld Packet.datum
    ret
    line 157
  end Packet_getDatum
  type line 159 _$45 = pointer to Packet
  procedure Packet_setDatum(me: _$45; someData: int32)
  begin
    line 161
    ldarg_0
    ldarg_1
    stfld Packet.datum
    line 162
  end Packet_setDatum
  type line 164 _$46 = pointer to Packet
  procedure Packet_getIdentity(me: _$46):int32
  begin
    line 166
    ldarg_0
    ldfld Packet.identity
    ret
    line 167
  end Packet_getIdentity
  type line 169 _$47 = pointer to Packet
  procedure Packet_setIdentity(me: _$47; anIdentity: int32)
  begin
    line 171
    ldarg_0
    ldarg_1
    stfld Packet.identity
    line 172
  end Packet_setIdentity
  type line 174 _$48 = pointer to Packet
  procedure Packet_getKind(me: _$48):int32
  begin
    line 176
    ldarg_0
    ldfld Packet.kind
    ret
    line 177
  end Packet_getKind
  type line 179 _$49 = pointer to Packet
  type line 20 _$50 = pointer to Packet
  procedure line 179 Packet_getLink(me: _$49):_$50
  begin
    line 181
    ldarg_0
    ldfld Packet.link
    ret
    line 182
  end Packet_getLink
  type line 184 _$51 = pointer to Packet
  type _$52 = pointer to Packet
  procedure Packet_setLink(me: _$51; aLink: _$52)
  begin
    line 186
    ldarg_0
    ldarg_1
    stfld Packet.link
    line 187
  end Packet_setLink
  type line 189 _$53 = pointer to Packet
  type line 20 _$54 = pointer to Packet
  type line 191 _$55 = pointer to Packet
  procedure line 189 RBObject_append(packet: _$53; queueHead: _$53):_$54
  var mouse: _$55; link: _$55; 
  begin
    line 193
    ldarg_0
    ldvar NO_WORK
    call Packet_setLink
    line 194
    if
      ldarg_1
      ldvar NO_WORK
      ceq
    then
      line 195
      ldarg_0
      ret
      line 196
    end
    line 198
    ldarg_1
    stloc_0
    line 200
    ldloc_0
    call Packet_getLink
    stloc_1
    line 201
    while
      ldvar NO_WORK
      ldloc_1
      ceq
      ldc_i4_0
      ceq
    do
      line 202
      ldloc_1
      stloc_0
      line 203
      ldloc_0
      call Packet_getLink
      stloc_1
      line 204
    end
    line 206
    ldloc_0
    ldarg_0
    call Packet_setLink
    line 207
    ldarg_1
    ret
    line 208
  end RBObject_append
  type line 210 _$56 = pointer to TaskState
  type line 212 _$57 = pointer to RBObject
  procedure TaskState_init(me: _$56)
  begin
    ldarg_0
    ldflda TaskState.base
    call RBObject_init
    line 213
    ldarg_0
    ldc_i4_0
    stfld TaskState.packetPending
    line 214
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskWaiting
    line 215
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskHolding
    line 216
  end TaskState_init
  type line 29 _$58 = pointer to TaskState
  type line 220 _$59 = pointer to TaskState
  procedure line 218 TaskState_create():_$58
  var me: _$59; 
  begin
    line 222
    ldloca_s 0
    newobj TaskState
    stind_ip
    line 223
    ldloc_0
    call TaskState_init
    line 224
    ldloc_0
    ret
    line 225
  end TaskState_create
  type line 227 _$60 = pointer to TaskState
  procedure TaskState_isPacketPending(me: _$60):bool
  begin
    line 229
    ldarg_0
    ldfld TaskState.packetPending
    ret
    line 230
  end TaskState_isPacketPending
  type line 232 _$61 = pointer to TaskState
  procedure TaskState_isTaskHolding(me: _$61):bool
  begin
    line 234
    ldarg_0
    ldfld TaskState.taskHolding
    ret
    line 235
  end TaskState_isTaskHolding
  type line 237 _$62 = pointer to TaskState
  procedure TaskState_isTaskWaiting(me: _$62):bool
  begin
    line 239
    ldarg_0
    ldfld TaskState.taskWaiting
    ret
    line 240
  end TaskState_isTaskWaiting
  type line 242 _$63 = pointer to TaskState
  procedure TaskState_setTaskHolding(me: _$63; b: bool)
  begin
    line 244
    ldarg_0
    ldarg_1
    stfld TaskState.taskHolding
    line 245
  end TaskState_setTaskHolding
  type line 247 _$64 = pointer to TaskState
  procedure TaskState_setTaskWaiting(me: _$64; b: bool)
  begin
    line 249
    ldarg_0
    ldarg_1
    stfld TaskState.taskWaiting
    line 250
  end TaskState_setTaskWaiting
  type line 252 _$65 = pointer to TaskState
  procedure TaskState_setPacketPending(me: _$65; b: bool)
  begin
    line 254
    ldarg_0
    ldarg_1
    stfld TaskState.packetPending
    line 255
  end TaskState_setPacketPending
  type line 257 _$66 = pointer to TaskState
  procedure TaskState_packetPending(me: _$66)
  begin
    line 259
    ldarg_0
    ldc_i4_1
    stfld TaskState.packetPending
    line 260
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskWaiting
    line 261
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskHolding
    line 262
  end TaskState_packetPending
  type line 264 _$67 = pointer to TaskState
  procedure TaskState_running(me: _$67)
  begin
    line 266
    ldarg_0
    ldc_i4_0
    stfld TaskState.packetPending
    line 267
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskWaiting
    line 268
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskHolding
    line 269
  end TaskState_running
  type line 271 _$68 = pointer to TaskState
  procedure TaskState_waiting(me: _$68)
  begin
    line 273
    ldarg_0
    ldc_i4_0
    stfld TaskState.packetPending
    line 274
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskHolding
    line 275
    ldarg_0
    ldc_i4_1
    stfld TaskState.taskWaiting
    line 276
  end TaskState_waiting
  type line 278 _$69 = pointer to TaskState
  procedure TaskState_waitingWithPacket(me: _$69)
  begin
    line 280
    ldarg_0
    ldc_i4_0
    stfld TaskState.taskHolding
    line 281
    ldarg_0
    ldc_i4_1
    stfld TaskState.taskWaiting
    line 282
    ldarg_0
    ldc_i4_1
    stfld TaskState.packetPending
    line 283
  end TaskState_waitingWithPacket
  type line 285 _$70 = pointer to TaskState
  procedure TaskState_isRunning(me: _$70):bool
  begin
    line 287
    iif
      iif
        ldarg_0
        ldfld TaskState.packetPending
        ldc_i4_0
        ceq
      then
        ldarg_0
        ldfld TaskState.taskWaiting
        ldc_i4_0
        ceq
      else
        ldc_i4_0
      end
    then
      ldarg_0
      ldfld TaskState.taskHolding
      ldc_i4_0
      ceq
    else
      ldc_i4_0
    end
    ret
    line 288
  end TaskState_isRunning
  type line 290 _$71 = pointer to TaskState
  procedure TaskState_isTaskHoldingOrWaiting(me: _$71):bool
  begin
    line 292
    iif
      ldarg_0
      ldfld TaskState.taskHolding
    then
      ldc_i4_1
    else
      iif
        ldarg_0
        ldfld TaskState.packetPending
        ldc_i4_0
        ceq
      then
        ldarg_0
        ldfld TaskState.taskWaiting
      else
        ldc_i4_0
      end
    end
    ret
    line 293
  end TaskState_isTaskHoldingOrWaiting
  type line 295 _$72 = pointer to TaskState
  procedure TaskState_isWaiting(me: _$72):bool
  begin
    line 297
    iif
      iif
        ldarg_0
        ldfld TaskState.packetPending
        ldc_i4_0
        ceq
      then
        ldarg_0
        ldfld TaskState.taskWaiting
      else
        ldc_i4_0
      end
    then
      ldarg_0
      ldfld TaskState.taskHolding
      ldc_i4_0
      ceq
    else
      ldc_i4_0
    end
    ret
    line 298
  end TaskState_isWaiting
  type line 300 _$73 = pointer to TaskState
  procedure TaskState_isWaitingWithPacket(me: _$73):bool
  begin
    line 302
    iif
      iif
        ldarg_0
        ldfld TaskState.packetPending
      then
        ldarg_0
        ldfld TaskState.taskWaiting
      else
        ldc_i4_0
      end
    then
      ldarg_0
      ldfld TaskState.taskHolding
      ldc_i4_0
      ceq
    else
      ldc_i4_0
    end
    ret
    line 303
  end TaskState_isWaitingWithPacket
  type line 29 _$74 = pointer to TaskState
  type line 307 _$75 = pointer to TaskState
  procedure line 305 TaskState_createPacketPending():_$74
  var t: _$75; 
  begin
    line 309
    call TaskState_create
    stloc_0
    line 310
    ldloc_0
    call TaskState_packetPending
    line 311
    ldloc_0
    ret
    line 312
  end TaskState_createPacketPending
  type line 29 _$76 = pointer to TaskState
  type line 316 _$77 = pointer to TaskState
  procedure line 314 TaskState_createRunning():_$76
  var t: _$77; 
  begin
    line 318
    call TaskState_create
    stloc_0
    line 319
    ldloc_0
    call TaskState_running
    line 320
    ldloc_0
    ret
    line 321
  end TaskState_createRunning
  type line 29 _$78 = pointer to TaskState
  type line 325 _$79 = pointer to TaskState
  procedure line 323 TaskState_createWaiting():_$78
  var t: _$79; 
  begin
    line 327
    call TaskState_create
    stloc_0
    line 328
    ldloc_0
    call TaskState_waiting
    line 329
    ldloc_0
    ret
    line 330
  end TaskState_createWaiting
  type line 29 _$80 = pointer to TaskState
  type line 334 _$81 = pointer to TaskState
  procedure line 332 TaskState_createWaitingWithPacket():_$80
  var t: _$81; 
  begin
    line 336
    call TaskState_create
    stloc_0
    line 337
    ldloc_0
    call TaskState_waitingWithPacket
    line 338
    ldloc_0
    ret
    line 339
  end TaskState_createWaitingWithPacket
  type line 341 _$82 = pointer to TaskControlBlock
  type line 342 _$83 = pointer to Packet
  type _$84 = pointer to TaskState
  type _$85 = pointer to ProcessFunction
  type line 343 _$86 = pointer to RBObject
  type line 36 _$87 = pointer to TaskControlBlock
  type line 345 _$88 = pointer to TaskControlBlock
  type line 348 _$89 = pointer to TaskState
  type line 353 _$90 = pointer to TaskState
  type line 354 _$91 = pointer to TaskState
  type line 355 _$92 = pointer to TaskState
  procedure line 341 TaskControlBlock_create(aLink: _$82; anIdentity: int32; aPriority: int32; line 342 anInitialWorkQueue: _$83; anInitialState: _$84; aBlock: _$85; line 343 aPrivateData: _$86):_$87
  var me: _$88; 
  begin
    line 347
    ldloca_s 0
    newobj TaskControlBlock
    stind_ip
    ldloc_0
    ldflda TaskControlBlock.base
    call TaskState_init
    line 349
    ldloc_0
    ldarg_0
    stfld TaskControlBlock.link
    line 350
    ldloc_0
    ldarg_1
    stfld TaskControlBlock.identity
    line 351
    ldloc_0
    ldarg_2
    stfld TaskControlBlock.priority
    line 352
    ldloc_0
    ldarg_3
    stfld TaskControlBlock.input
    ldloc_0
    ldflda TaskControlBlock.base
    ldarg_s 4
    call TaskState_isPacketPending
    call TaskState_setPacketPending
    ldloc_0
    ldflda TaskControlBlock.base
    ldarg_s 4
    call TaskState_isTaskWaiting
    call TaskState_setTaskWaiting
    ldloc_0
    ldflda TaskControlBlock.base
    ldarg_s 4
    call TaskState_isTaskHolding
    call TaskState_setTaskHolding
    line 356
    ldloc_0
    ldarg_s 5
    stfld TaskControlBlock.procedure_
    line 357
    ldloc_0
    ldarg_s 6
    stfld TaskControlBlock.handle
    line 358
    ldloc_0
    ret
    line 359
  end TaskControlBlock_create
  type line 361 _$93 = pointer to TaskControlBlock
  procedure TaskControlBlock_getIdentity(me: _$93):int32
  begin
    line 363
    ldarg_0
    ldfld TaskControlBlock.identity
    ret
    line 364
  end TaskControlBlock_getIdentity
  type line 366 _$94 = pointer to TaskControlBlock
  type line 36 _$95 = pointer to TaskControlBlock
  procedure line 366 TaskControlBlock_getLink(me: _$94):_$95
  begin
    line 368
    ldarg_0
    ldfld TaskControlBlock.link
    ret
    line 369
  end TaskControlBlock_getLink
  type line 371 _$96 = pointer to TaskControlBlock
  procedure TaskControlBlock_getPriority(me: _$96):int32
  begin
    line 373
    ldarg_0
    ldfld TaskControlBlock.priority
    ret
    line 374
  end TaskControlBlock_getPriority
  type line 376 _$97 = pointer to TaskControlBlock
  type _$98 = pointer to Packet
  type line 377 _$99 = pointer to TaskControlBlock
  type line 36 _$100 = pointer to TaskControlBlock
  type line 381 _$101 = pointer to TaskState
  procedure line 376 TaskControlBlock_addInputAndCheckPriority(me: _$97; packet: _$98; line 377 oldTask: _$99):_$100
  begin
    line 379
    if
      ldarg_0
      ldfld TaskControlBlock.input
      ldvar NO_WORK
      ceq
    then
      line 380
      ldarg_0
      ldarg_1
      stfld TaskControlBlock.input
      ldarg_0
      ldflda TaskControlBlock.base
      ldc_i4_1
      call TaskState_setPacketPending
      line 382
      if
        ldarg_0
        ldfld TaskControlBlock.priority
        ldarg_2
        call TaskControlBlock_getPriority
        cgt
      then
        line 383
        ldarg_0
        ret
        line 384
      end
      line 385
    else
      line 386
      ldarg_0
      ldarg_1
      ldarg_0
      ldfld TaskControlBlock.input
      call RBObject_append
      stfld TaskControlBlock.input
      line 387
    end
    line 388
    ldarg_2
    ret
    line 389
  end TaskControlBlock_addInputAndCheckPriority
  type line 391 _$102 = pointer to TaskControlBlock
  type line 36 _$103 = pointer to TaskControlBlock
  type line 393 _$104 = pointer to Packet
  type _$105 = pointer to TaskState
  type line 399 _$106 = pointer to TaskState
  type line 401 _$107 = pointer to TaskState
  procedure line 391 TaskControlBlock_runTask(me: _$102):_$103
  var message: _$104; 
  begin
    line 395
    if
      ldarg_0
      ldflda TaskControlBlock.base
      call TaskState_isWaitingWithPacket
    then
      line 396
      ldarg_0
      ldfld TaskControlBlock.input
      stloc_0
      line 397
      ldarg_0
      ldloc_0
      call Packet_getLink
      stfld TaskControlBlock.input
      line 398
      if
        ldarg_0
        ldfld TaskControlBlock.input
        ldvar NO_WORK
        ceq
      then
        ldarg_0
        ldflda TaskControlBlock.base
        call TaskState_running
        line 400
      else
        ldarg_0
        ldflda TaskControlBlock.base
        call TaskState_packetPending
        line 402
      end
      line 403
    else
      line 404
      ldvar NO_WORK
      stloc_0
      line 405
    end
    line 406
    ldarg_0
    ldfld TaskControlBlock.procedure_
    ldloc_0
    ldarg_0
    ldfld TaskControlBlock.handle
    ldarg_0
    ldfld TaskControlBlock.procedure_
    ldfld ProcessFunction.apply
    calli _$11
    ret
    line 407
  end TaskControlBlock_runTask
  type line 51 _$108 = pointer to DeviceTaskDataRecord
  type line 411 _$109 = pointer to DeviceTaskDataRecord
  type line 414 _$110 = pointer to RBObject
  procedure line 409 DeviceTaskDataRecord_create():_$108
  var me: _$109; 
  begin
    line 413
    ldloca_s 0
    newobj DeviceTaskDataRecord
    stind_ip
    ldloc_0
    ldflda DeviceTaskDataRecord.base
    call RBObject_init
    line 415
    ldloc_0
    ldvar NO_WORK
    stfld DeviceTaskDataRecord.pending
    line 416
    ldloc_0
    ret
    line 417
  end DeviceTaskDataRecord_create
  type line 419 _$111 = pointer to DeviceTaskDataRecord
  type line 20 _$112 = pointer to Packet
  procedure line 419 DeviceTaskDataRecord_getPending(me: _$111):_$112
  begin
    line 421
    ldarg_0
    ldfld DeviceTaskDataRecord.pending
    ret
    line 422
  end DeviceTaskDataRecord_getPending
  type line 424 _$113 = pointer to DeviceTaskDataRecord
  type _$114 = pointer to Packet
  procedure DeviceTaskDataRecord_setPending(me: _$113; packet: _$114)
  begin
    line 426
    ldarg_0
    ldarg_1
    stfld DeviceTaskDataRecord.pending
    line 427
  end DeviceTaskDataRecord_setPending
  type line 56 _$115 = pointer to HandlerTaskDataRecord
  type line 431 _$116 = pointer to HandlerTaskDataRecord
  type line 434 _$117 = pointer to RBObject
  procedure line 429 HandlerTaskDataRecord_create():_$115
  var me: _$116; 
  begin
    line 433
    ldloca_s 0
    newobj HandlerTaskDataRecord
    stind_ip
    ldloc_0
    ldflda HandlerTaskDataRecord.base
    call RBObject_init
    line 435
    ldloc_0
    ldvar NO_WORK
    stfld HandlerTaskDataRecord.workIn
    line 436
    ldloc_0
    ldvar NO_WORK
    stfld HandlerTaskDataRecord.deviceIn
    line 437
    ldloc_0
    ret
    line 438
  end HandlerTaskDataRecord_create
  type line 440 _$118 = pointer to HandlerTaskDataRecord
  type line 20 _$119 = pointer to Packet
  procedure line 440 HandlerTaskDataRecord_deviceIn(me: _$118):_$119
  begin
    line 442
    ldarg_0
    ldfld HandlerTaskDataRecord.deviceIn
    ret
    line 443
  end HandlerTaskDataRecord_deviceIn
  type line 445 _$120 = pointer to HandlerTaskDataRecord
  type _$121 = pointer to Packet
  procedure HandlerTaskDataRecord_setDeviceIn(me: _$120; aPacket: _$121)
  begin
    line 447
    ldarg_0
    ldarg_1
    stfld HandlerTaskDataRecord.deviceIn
    line 448
  end HandlerTaskDataRecord_setDeviceIn
  type line 450 _$122 = pointer to HandlerTaskDataRecord
  type _$123 = pointer to Packet
  procedure HandlerTaskDataRecord_deviceInAdd(me: _$122; packet: _$123)
  begin
    line 452
    ldarg_0
    ldarg_1
    ldarg_0
    ldfld HandlerTaskDataRecord.deviceIn
    call RBObject_append
    stfld HandlerTaskDataRecord.deviceIn
    line 453
  end HandlerTaskDataRecord_deviceInAdd
  type line 455 _$124 = pointer to HandlerTaskDataRecord
  type line 20 _$125 = pointer to Packet
  procedure line 455 HandlerTaskDataRecord_workIn(me: _$124):_$125
  begin
    line 457
    ldarg_0
    ldfld HandlerTaskDataRecord.workIn
    ret
    line 458
  end HandlerTaskDataRecord_workIn
  type line 460 _$126 = pointer to HandlerTaskDataRecord
  type _$127 = pointer to Packet
  procedure HandlerTaskDataRecord_setWorkIn(me: _$126; aWorkQueue: _$127)
  begin
    line 462
    ldarg_0
    ldarg_1
    stfld HandlerTaskDataRecord.workIn
    line 463
  end HandlerTaskDataRecord_setWorkIn
  type line 465 _$128 = pointer to HandlerTaskDataRecord
  type _$129 = pointer to Packet
  procedure HandlerTaskDataRecord_workInAdd(me: _$128; packet: _$129)
  begin
    line 467
    ldarg_0
    ldarg_1
    ldarg_0
    ldfld HandlerTaskDataRecord.workIn
    call RBObject_append
    stfld HandlerTaskDataRecord.workIn
    line 468
  end HandlerTaskDataRecord_workInAdd
  type line 62 _$130 = pointer to IdleTaskDataRecord
  type line 472 _$131 = pointer to IdleTaskDataRecord
  type line 475 _$132 = pointer to RBObject
  procedure line 470 IdleTaskDataRecord_create():_$130
  var me: _$131; 
  begin
    line 474
    ldloca_s 0
    newobj IdleTaskDataRecord
    stind_ip
    ldloc_0
    ldflda IdleTaskDataRecord.base
    call RBObject_init
    line 476
    ldloc_0
    ldc_i4_1
    stfld IdleTaskDataRecord.control
    line 477
    ldloc_0
    ldc_i4 10000
    stfld IdleTaskDataRecord.count
    line 478
    ldloc_0
    ret
    line 479
  end IdleTaskDataRecord_create
  type line 481 _$133 = pointer to IdleTaskDataRecord
  procedure IdleTaskDataRecord_getControl(me: _$133):int32
  begin
    line 483
    ldarg_0
    ldfld IdleTaskDataRecord.control
    ret
    line 484
  end IdleTaskDataRecord_getControl
  type line 486 _$134 = pointer to IdleTaskDataRecord
  procedure IdleTaskDataRecord_setControl(me: _$134; aNumber: int32)
  begin
    line 488
    ldarg_0
    ldarg_1
    stfld IdleTaskDataRecord.control
    line 489
  end IdleTaskDataRecord_setControl
  type line 491 _$135 = pointer to IdleTaskDataRecord
  procedure IdleTaskDataRecord_getCount(me: _$135):int32
  begin
    line 493
    ldarg_0
    ldfld IdleTaskDataRecord.count
    ret
    line 494
  end IdleTaskDataRecord_getCount
  type line 496 _$136 = pointer to IdleTaskDataRecord
  procedure IdleTaskDataRecord_setCount(me: _$136; aCount: int32)
  begin
    line 498
    ldarg_0
    ldarg_1
    stfld IdleTaskDataRecord.count
    line 499
  end IdleTaskDataRecord_setCount
  type line 68 _$137 = pointer to WorkerTaskDataRecord
  type line 503 _$138 = pointer to WorkerTaskDataRecord
  type line 506 _$139 = pointer to RBObject
  procedure line 501 WorkerTaskDataRecord_create():_$137
  var me: _$138; 
  begin
    line 505
    ldloca_s 0
    newobj WorkerTaskDataRecord
    stind_ip
    ldloc_0
    ldflda WorkerTaskDataRecord.base
    call RBObject_init
    line 507
    ldloc_0
    ldc_i4_2
    stfld WorkerTaskDataRecord.destination
    line 508
    ldloc_0
    ldc_i4_0
    stfld WorkerTaskDataRecord.count
    line 509
    ldloc_0
    ret
    line 510
  end WorkerTaskDataRecord_create
  type line 512 _$140 = pointer to WorkerTaskDataRecord
  procedure WorkerTaskDataRecord_getCount(me: _$140):int32
  begin
    line 514
    ldarg_0
    ldfld WorkerTaskDataRecord.count
    ret
    line 515
  end WorkerTaskDataRecord_getCount
  type line 517 _$141 = pointer to WorkerTaskDataRecord
  procedure WorkerTaskDataRecord_setCount(me: _$141; aCount: int32)
  begin
    line 519
    ldarg_0
    ldarg_1
    stfld WorkerTaskDataRecord.count
    line 520
  end WorkerTaskDataRecord_setCount
  type line 522 _$142 = pointer to WorkerTaskDataRecord
  procedure WorkerTaskDataRecord_getDestination(me: _$142):int32
  begin
    line 524
    ldarg_0
    ldfld WorkerTaskDataRecord.destination
    ret
    line 525
  end WorkerTaskDataRecord_getDestination
  type line 527 _$143 = pointer to WorkerTaskDataRecord
  procedure WorkerTaskDataRecord_setDestination(me: _$143; aHandler: int32)
  begin
    line 529
    ldarg_0
    ldarg_1
    stfld WorkerTaskDataRecord.destination
    line 530
  end WorkerTaskDataRecord_setDestination
  type line 532 _$144 = pointer to Scheduler
  procedure Scheduler_init(me: _$144)
  var line 534 i: int32; _$145: int32; 
  begin
    line 536
    ldarg_0
    ldc_i4_0
    stfld Scheduler.layout
    line 537
    ldarg_0
    ldnull
    stfld Scheduler.currentTask
    line 538
    ldarg_0
    ldc_i4_0
    stfld Scheduler.currentTaskIdentity
    line 539
    ldarg_0
    ldc_i4_0
    stfld Scheduler.queuePacketCount
    line 540
    ldarg_0
    ldc_i4_0
    stfld Scheduler.holdCount
    line 541
    ldc_i4_0
    stloc_0
    ldc_i4_5
    stloc_1
    while
      ldloc_0
      ldloc_1
      cgt
      ldc_i4_0
      ceq
    do
      line 542
      ldarg_0
      ldflda Scheduler.taskTable
      ldloc_0
      ldvar NO_TASK
      stelem _$17
      line 541
      ldloc_0
      ldc_i4_1
      add
      stloc_0
      line 543
    end
    line 544
    ldarg_0
    ldvar NO_TASK
    stfld Scheduler.taskList
    line 545
  end Scheduler_init
  type line 547 _$146 = pointer to Scheduler
  type _$147 = pointer to ProcessFunction
  type _$148 = pointer to Packet
  type _$149 = pointer to RBObject
  type line 36 _$150 = pointer to TaskControlBlock
  type line 547 _$151 = proc(me: _$147; work: _$148; word: _$149):_$150
  type line 85 _$152 = pointer to FP
  type line 549 _$153 = pointer to FP
  type line 552 _$154 = pointer to ProcessFunction
  procedure line 547 FP_create(s: _$146; apply: _$151):_$152
  var me: _$153; 
  begin
    line 551
    ldloca_s 0
    newobj FP
    stind_ip
    ldloc_0
    ldflda FP.base
    call RBObject_init
    line 553
    ldloc_0
    ldarg_0
    stfld FP.s
    line 554
    ldloc_0
    ldflda FP.base
    ldarg_1
    stfld ProcessFunction.apply
    line 555
    ldloc_0
    ret
    line 556
  end FP_create
  type line 558 _$155 = pointer to ProcessFunction
  type _$156 = pointer to Packet
  type _$157 = pointer to RBObject
  type line 36 _$158 = pointer to TaskControlBlock
  type line 560 _$159 = pointer to DeviceTaskDataRecord
  type line 561 _$160 = pointer to FP
  type line 562 _$161 = pointer to Packet
  type line 564 _$162 = pointer to DeviceTaskDataRecord
  type line 565 _$163 = pointer to FP
  procedure line 558 createDevice_apply(me: _$155; workArg: _$156; wordArg: _$157):_$158
  var dataRecord: _$159; fp: _$160; functionWork: _$161; 
  begin
    ldarg_2
    castptr DeviceTaskDataRecord
    stloc_0
    ldarg_0
    castptr FP
    stloc_1
    line 566
    ldarg_1
    stloc_2
    line 567
    if
      ldloc_2
      ldvar NO_WORK
      ceq
    then
      line 568
      ldloc_0
      call DeviceTaskDataRecord_getPending
      stloc_2
      line 569
      if
        ldvar NO_WORK
        ldloc_2
        ceq
      then
        line 570
        ldloc_1
        ldfld FP.s
        call Scheduler_markWaiting
        ret
        line 571
      else
        line 572
        ldloc_0
        ldvar NO_WORK
        call DeviceTaskDataRecord_setPending
        line 573
        ldloc_1
        ldfld FP.s
        ldloc_2
        call Scheduler_queuePacket
        ret
        line 574
      end
      line 575
    else
      line 576
      ldloc_0
      ldloc_2
      call DeviceTaskDataRecord_setPending
      line 577
      if
        ldvar TRACING
      then
        line 578
        ldloc_1
        ldfld FP.s
        ldloc_2
        call Packet_getDatum
        call Scheduler_trace
        line 579
      end
      line 580
      ldloc_1
      ldfld FP.s
      call Scheduler_holdSelf
      ret
      line 581
    end
    line 582
  end createDevice_apply
  type line 584 _$164 = pointer to Scheduler
  type _$165 = pointer to Packet
  type line 585 _$166 = pointer to TaskState
  type _$167 = pointer to ProcessFunction
  type _$168 = pointer to RBObject
  type line 587 _$169 = pointer to TaskControlBlock
  procedure line 584 Scheduler_createTask(me: _$164; identity: int32; priority: int32; work: _$165; line 585 state: _$166; aBlock: _$167; data: _$168)
  var t: _$169; 
  begin
    line 589
    ldarg_0
    ldfld Scheduler.taskList
    ldarg_1
    ldarg_2
    ldarg_3
    ldarg_s 4
    ldarg_s 5
    ldarg_s 6
    call TaskControlBlock_create
    stloc_0
    line 590
    ldarg_0
    ldloc_0
    stfld Scheduler.taskList
    line 591
    ldarg_0
    ldflda Scheduler.taskTable
    ldarg_1
    ldloc_0
    stelem _$17
    line 592
  end Scheduler_createTask
  type line 594 _$170 = pointer to Scheduler
  type _$171 = pointer to Packet
  type _$172 = pointer to TaskState
  type line 596 _$173 = pointer to DeviceTaskDataRecord
  type line 597 _$174 = pointer to FP
  type line 601 _$175 = pointer to ProcessFunction
  procedure Scheduler_createDevice(me: _$170; identity: int32; priority: int32; workPacket: _$171; state: _$172)
  var data: _$173; fp: _$174; 
  begin
    line 599
    call DeviceTaskDataRecord_create
    stloc_0
    line 600
    ldarg_0
    ldproc createDevice_apply
    call FP_create
    stloc_1
    ldarg_0
    ldarg_1
    ldarg_2
    ldarg_3
    ldarg_s 4
    ldloc_1
    ldflda FP.base
    ldloc_0
    call Scheduler_createTask
    line 602
  end Scheduler_createDevice
  type line 604 _$176 = pointer to ProcessFunction
  type _$177 = pointer to Packet
  type _$178 = pointer to RBObject
  type line 36 _$179 = pointer to TaskControlBlock
  type line 606 _$180 = pointer to HandlerTaskDataRecord
  type line 607 _$181 = pointer to FP
  type line 608 _$182 = pointer to Packet
  type line 611 _$183 = pointer to HandlerTaskDataRecord
  type line 612 _$184 = pointer to FP
  procedure line 604 createHandler_apply(me: _$176; work: _$177; word: _$178):_$179
  var dataRecord: _$180; fp: _$181; workPacket: _$182; devicePacket: _$182; line 609 count: int32; 
  begin
    ldarg_2
    castptr HandlerTaskDataRecord
    stloc_0
    ldarg_0
    castptr FP
    stloc_1
    line 613
    if
      ldarg_1
      ldvar NO_WORK
      ceq
      ldc_i4_0
      ceq
    then
      line 614
      if
        ldarg_1
        call Packet_getKind
        ldc_i4_1
        ceq
      then
        line 615
        ldloc_0
        ldarg_1
        call HandlerTaskDataRecord_workInAdd
        line 616
      else
        line 617
        ldloc_0
        ldarg_1
        call HandlerTaskDataRecord_deviceInAdd
        line 618
      end
      line 619
    end
    line 621
    ldloc_0
    call HandlerTaskDataRecord_workIn
    stloc_2
    line 622
    if
      ldloc_2
      ldvar NO_WORK
      ceq
    then
      line 623
      ldloc_1
      ldfld FP.s
      call Scheduler_markWaiting
      ret
      line 624
    else
      line 625
      ldloc_2
      call Packet_getDatum
      stloc_s 4
      line 626
      if
        ldloc_s 4
        ldc_i4_4
        clt
        ldc_i4_0
        ceq
      then
        line 627
        ldloc_0
        ldloc_2
        call Packet_getLink
        call HandlerTaskDataRecord_setWorkIn
        line 628
        ldloc_1
        ldfld FP.s
        ldloc_2
        call Scheduler_queuePacket
        ret
        line 629
      else
        line 630
        ldloc_0
        call HandlerTaskDataRecord_deviceIn
        stloc_3
        line 631
        if
          ldloc_3
          ldvar NO_WORK
          ceq
        then
          line 632
          ldloc_1
          ldfld FP.s
          call Scheduler_markWaiting
          ret
          line 633
        else
          line 634
          ldloc_0
          ldloc_3
          call Packet_getLink
          call HandlerTaskDataRecord_setDeviceIn
          line 635
          ldloc_3
          ldloc_2
          call Packet_getData
          ldloc_s 4
          ldelema int32
          call Packet_setDatum
          line 636
          ldloc_2
          ldloc_s 4
          ldc_i4_1
          add
          call Packet_setDatum
          line 637
          ldloc_1
          ldfld FP.s
          ldloc_3
          call Scheduler_queuePacket
          ret
          line 638
        end
        line 639
      end
      line 640
    end
    line 641
  end createHandler_apply
  type line 643 _$185 = pointer to Scheduler
  type _$186 = pointer to Packet
  type _$187 = pointer to TaskState
  type line 645 _$188 = pointer to HandlerTaskDataRecord
  type line 646 _$189 = pointer to FP
  type line 650 _$190 = pointer to ProcessFunction
  procedure Scheduler_createHandler(me: _$185; identity: int32; priority: int32; workPacket: _$186; state: _$187)
  var data: _$188; fp: _$189; 
  begin
    line 648
    call HandlerTaskDataRecord_create
    stloc_0
    line 649
    ldarg_0
    ldproc createHandler_apply
    call FP_create
    stloc_1
    ldarg_0
    ldarg_1
    ldarg_2
    ldarg_3
    ldarg_s 4
    ldloc_1
    ldflda FP.base
    ldloc_0
    call Scheduler_createTask
    line 651
  end Scheduler_createHandler
  type line 653 _$191 = pointer to ProcessFunction
  type _$192 = pointer to Packet
  type _$193 = pointer to RBObject
  type line 36 _$194 = pointer to TaskControlBlock
  type line 655 _$195 = pointer to IdleTaskDataRecord
  type line 656 _$196 = pointer to FP
  type line 658 _$197 = pointer to IdleTaskDataRecord
  type line 659 _$198 = pointer to FP
  procedure line 653 createIdler_apply(me: _$191; workArg: _$192; wordArg: _$193):_$194
  var dataRecord: _$195; fp: _$196; 
  begin
    ldarg_2
    castptr IdleTaskDataRecord
    stloc_0
    ldarg_0
    castptr FP
    stloc_1
    line 660
    ldloc_0
    ldloc_0
    call IdleTaskDataRecord_getCount
    ldc_i4_1
    sub
    call IdleTaskDataRecord_setCount
    line 661
    if
      ldloc_0
      call IdleTaskDataRecord_getCount
      ldc_i4_0
      ceq
    then
      line 662
      ldloc_1
      ldfld FP.s
      call Scheduler_holdSelf
      ret
      line 663
    else
      line 664
      if
        ldloc_0
        call IdleTaskDataRecord_getControl
        conv_u4
        ldc_i4_1
        and
        ldc_i4_0
        ceq
      then
        line 665
        ldloc_0
        ldloc_0
        call IdleTaskDataRecord_getControl
        ldc_i4_2
        div
        call IdleTaskDataRecord_setControl
        line 666
        ldloc_1
        ldfld FP.s
        ldc_i4_4
        call Scheduler_release
        ret
        line 667
      else
        line 668
        ldloc_0
        ldloc_0
        call IdleTaskDataRecord_getControl
        conv_u4
        ldc_i4_2
        div_un
        ldc_i4 53256
        xor
        conv_i4
        call IdleTaskDataRecord_setControl
        line 669
        ldloc_1
        ldfld FP.s
        ldc_i4_5
        call Scheduler_release
        ret
        line 670
      end
      line 671
    end
    line 672
  end createIdler_apply
  type line 674 _$199 = pointer to Scheduler
  type _$200 = pointer to Packet
  type _$201 = pointer to TaskState
  type line 676 _$202 = pointer to IdleTaskDataRecord
  type line 677 _$203 = pointer to FP
  type line 681 _$204 = pointer to ProcessFunction
  procedure Scheduler_createIdler(me: _$199; identity: int32; priority: int32; work: _$200; state: _$201)
  var data: _$202; fp: _$203; 
  begin
    line 679
    call IdleTaskDataRecord_create
    stloc_0
    line 680
    ldarg_0
    ldproc createIdler_apply
    call FP_create
    stloc_1
    ldarg_0
    ldarg_1
    ldarg_2
    ldarg_3
    ldarg_s 4
    ldloc_1
    ldflda FP.base
    ldloc_0
    call Scheduler_createTask
    line 682
  end Scheduler_createIdler
  type line 684 _$205 = pointer to Scheduler
  type _$206 = pointer to Packet
  type line 20 _$207 = pointer to Packet
  procedure line 684 Scheduler_createPacket(me: _$205; link: _$206; identity: int32; kind: int32):_$207
  begin
    line 686
    ldarg_1
    ldarg_2
    ldarg_3
    call Packet_create
    ret
    line 687
  end Scheduler_createPacket
  type line 689 _$208 = pointer to ProcessFunction
  type _$209 = pointer to Packet
  type _$210 = pointer to RBObject
  type line 36 _$211 = pointer to TaskControlBlock
  type line 691 _$212 = pointer to WorkerTaskDataRecord
  type line 692 _$213 = pointer to FP
  type line 695 _$214 = pointer to WorkerTaskDataRecord
  type line 696 _$215 = pointer to FP
  procedure line 689 createWorker_apply(me: _$208; work: _$209; word: _$210):_$211
  var data: _$212; fp: _$213; line 693 i: int32; _$216: int32; 
  begin
    ldarg_2
    castptr WorkerTaskDataRecord
    stloc_0
    ldarg_0
    castptr FP
    stloc_1
    line 697
    if
      ldarg_1
      ldvar NO_WORK
      ceq
    then
      line 698
      ldloc_1
      ldfld FP.s
      call Scheduler_markWaiting
      ret
      line 699
    else
      line 700
      if
        ldloc_0
        call WorkerTaskDataRecord_getDestination
        ldc_i4_2
        ceq
      then
        line 701
        ldloc_0
        ldc_i4_3
        call WorkerTaskDataRecord_setDestination
        line 702
      else
        line 703
        ldloc_0
        ldc_i4_2
        call WorkerTaskDataRecord_setDestination
        line 704
      end
      line 705
      ldarg_1
      ldloc_0
      call WorkerTaskDataRecord_getDestination
      call Packet_setIdentity
      line 706
      ldarg_1
      ldc_i4_0
      call Packet_setDatum
      line 707
      ldc_i4_0
      stloc_2
      ldc_i4_3
      stloc_3
      while
        ldloc_2
        ldloc_3
        cgt
        ldc_i4_0
        ceq
      do
        line 708
        ldloc_0
        ldloc_0
        call WorkerTaskDataRecord_getCount
        ldc_i4_1
        add
        call WorkerTaskDataRecord_setCount
        line 709
        if
          ldloc_0
          call WorkerTaskDataRecord_getCount
          ldc_i4_s 26
          cgt
        then
          line 710
          ldloc_0
          ldc_i4_1
          call WorkerTaskDataRecord_setCount
          line 711
        end
        line 712
        ldarg_1
        call Packet_getData
        ldloc_2
        ldc_i4_s 65
        ldloc_0
        call WorkerTaskDataRecord_getCount
        add
        ldc_i4_1
        sub
        stelem_i4
        line 707
        ldloc_2
        ldc_i4_1
        add
        stloc_2
        line 713
      end
      line 714
      ldloc_1
      ldfld FP.s
      ldarg_1
      call Scheduler_queuePacket
      ret
      line 715
    end
    line 716
  end createWorker_apply
  type line 718 _$217 = pointer to Scheduler
  type _$218 = pointer to Packet
  type _$219 = pointer to TaskState
  type line 720 _$220 = pointer to WorkerTaskDataRecord
  type line 721 _$221 = pointer to FP
  type line 725 _$222 = pointer to ProcessFunction
  procedure Scheduler_createWorker(me: _$217; identity: int32; priority: int32; workPacket: _$218; state: _$219)
  var dataRecord: _$220; fp: _$221; 
  begin
    line 723
    call WorkerTaskDataRecord_create
    stloc_0
    line 724
    ldarg_0
    ldproc createWorker_apply
    call FP_create
    stloc_1
    ldarg_0
    ldarg_1
    ldarg_2
    ldarg_3
    ldarg_s 4
    ldloc_1
    ldflda FP.base
    ldloc_0
    call Scheduler_createTask
    line 726
  end Scheduler_createWorker
  type line 728 _$223 = pointer to Scheduler
  type line 730 _$224 = pointer to Packet
  procedure Scheduler_start(me: _$223):bool
  var workQ: _$224; 
  begin
    line 732
    ldnull
    stloc_0
    line 733
    ldarg_0
    ldc_i4_0
    ldc_i4_0
    ldvar NO_WORK
    call TaskState_createRunning
    call Scheduler_createIdler
    line 734
    ldarg_0
    ldvar NO_WORK
    ldc_i4_1
    ldc_i4_1
    call Scheduler_createPacket
    stloc_0
    line 735
    ldarg_0
    ldloc_0
    ldc_i4_1
    ldc_i4_1
    call Scheduler_createPacket
    stloc_0
    line 736
    ldarg_0
    ldc_i4_1
    ldc_i4 1000
    ldloc_0
    call TaskState_createWaitingWithPacket
    call Scheduler_createWorker
    line 737
    ldarg_0
    ldvar NO_WORK
    ldc_i4_4
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 738
    ldarg_0
    ldloc_0
    ldc_i4_4
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 739
    ldarg_0
    ldloc_0
    ldc_i4_4
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 740
    ldarg_0
    ldc_i4_2
    ldc_i4 2000
    ldloc_0
    call TaskState_createWaitingWithPacket
    call Scheduler_createHandler
    line 741
    ldarg_0
    ldvar NO_WORK
    ldc_i4_5
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 742
    ldarg_0
    ldloc_0
    ldc_i4_5
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 743
    ldarg_0
    ldloc_0
    ldc_i4_5
    ldc_i4_0
    call Scheduler_createPacket
    stloc_0
    line 744
    ldarg_0
    ldc_i4_3
    ldc_i4 3000
    ldloc_0
    call TaskState_createWaitingWithPacket
    call Scheduler_createHandler
    line 745
    ldarg_0
    ldc_i4_4
    ldc_i4 4000
    ldvar NO_WORK
    call TaskState_createWaiting
    call Scheduler_createDevice
    line 746
    ldarg_0
    ldc_i4_5
    ldc_i4 5000
    ldvar NO_WORK
    call TaskState_createWaiting
    call Scheduler_createDevice
    line 747
    ldarg_0
    call Scheduler_schedule
    line 748
    iif
      ldarg_0
      ldfld Scheduler.queuePacketCount
      ldc_i4 23246
      ceq
    then
      ldarg_0
      ldfld Scheduler.holdCount
      ldc_i4 9297
      ceq
    else
      ldc_i4_0
    end
    ret
    line 749
  end Scheduler_start
  type line 751 _$225 = pointer to Scheduler
  type line 36 _$226 = pointer to TaskControlBlock
  type line 753 _$227 = pointer to TaskControlBlock
  procedure line 751 Scheduler_findTask(me: _$225; identity: int32):_$226
  var t: _$227; 
  begin
    line 755
    ldarg_0
    ldflda Scheduler.taskTable
    ldarg_1
    ldelem _$17
    stloc_0
    line 756
    if
      ldloc_0
      ldvar NO_TASK
      ceq
    then
      line 757
      ldc_i4_0
      ldc_i4 757
      ldstr "/home/me/Entwicklung/Modules/Micron/testcases/Richards.mic"
      call MIC$!assert
      line 758
    end
    line 759
    ldloc_0
    ret
    line 760
  end Scheduler_findTask
  type line 762 _$228 = pointer to Scheduler
  type line 36 _$229 = pointer to TaskControlBlock
  type line 765 _$230 = pointer to TaskState
  procedure line 762 Scheduler_holdSelf(me: _$228):_$229
  begin
    line 764
    ldarg_0
    ldarg_0
    ldfld Scheduler.holdCount
    ldc_i4_1
    add
    stfld Scheduler.holdCount
    ldarg_0
    ldfld Scheduler.currentTask
    ldflda TaskControlBlock.base
    ldc_i4_1
    call TaskState_setTaskHolding
    line 766
    ldarg_0
    ldfld Scheduler.currentTask
    call TaskControlBlock_getLink
    ret
    line 767
  end Scheduler_holdSelf
  type line 769 _$231 = pointer to Scheduler
  type _$232 = pointer to Packet
  type line 36 _$233 = pointer to TaskControlBlock
  type line 771 _$234 = pointer to TaskControlBlock
  procedure line 769 Scheduler_queuePacket(me: _$231; packet: _$232):_$233
  var t: _$234; 
  begin
    line 773
    ldarg_0
    ldarg_1
    call Packet_getIdentity
    call Scheduler_findTask
    stloc_0
    line 774
    if
      ldloc_0
      ldvar NO_TASK
      ceq
    then
      line 775
      ldvar NO_TASK
      ret
      line 776
    end
    line 777
    ldarg_0
    ldarg_0
    ldfld Scheduler.queuePacketCount
    ldc_i4_1
    add
    stfld Scheduler.queuePacketCount
    line 778
    ldarg_1
    ldvar NO_WORK
    call Packet_setLink
    line 779
    ldarg_1
    ldarg_0
    ldfld Scheduler.currentTaskIdentity
    call Packet_setIdentity
    line 780
    ldloc_0
    ldarg_1
    ldarg_0
    ldfld Scheduler.currentTask
    call TaskControlBlock_addInputAndCheckPriority
    ret
    line 781
  end Scheduler_queuePacket
  type line 783 _$235 = pointer to Scheduler
  type line 36 _$236 = pointer to TaskControlBlock
  type line 785 _$237 = pointer to TaskControlBlock
  type line 791 _$238 = pointer to TaskState
  procedure line 783 Scheduler_release(me: _$235; identity: int32):_$236
  var t: _$237; 
  begin
    line 787
    ldarg_0
    ldarg_1
    call Scheduler_findTask
    stloc_0
    line 788
    if
      ldloc_0
      ldvar NO_TASK
      ceq
    then
      line 789
      ldvar NO_TASK
      ret
      line 790
    end
    ldloc_0
    ldflda TaskControlBlock.base
    ldc_i4_0
    call TaskState_setTaskHolding
    line 792
    if
      ldloc_0
      call TaskControlBlock_getPriority
      ldarg_0
      ldfld Scheduler.currentTask
      call TaskControlBlock_getPriority
      cgt
    then
      line 793
      ldloc_0
      ret
      line 794
    else
      line 795
      ldarg_0
      ldfld Scheduler.currentTask
      ret
      line 796
    end
    line 797
  end Scheduler_release
  type line 799 _$239 = pointer to Scheduler
  procedure Scheduler_trace(me: _$239; id: int32)
  begin
    line 801
    ldarg_0
    ldarg_0
    ldfld Scheduler.layout
    ldc_i4_1
    sub
    stfld Scheduler.layout
    line 802
    if
      ldarg_0
      ldfld Scheduler.layout
      ldc_i4_0
      cgt
      ldc_i4_0
      ceq
    then
      line 804
      ldarg_0
      ldc_i4_s 50
      stfld Scheduler.layout
      line 805
    end
    line 806
    ldarg_1
    conv_i8
    call MIC$!printI8
    line 807
  end Scheduler_trace
  type line 809 _$240 = pointer to Scheduler
  type line 36 _$241 = pointer to TaskControlBlock
  type line 811 _$242 = pointer to TaskState
  procedure line 809 Scheduler_markWaiting(me: _$240):_$241
  begin
    ldarg_0
    ldfld Scheduler.currentTask
    ldflda TaskControlBlock.base
    ldc_i4_1
    call TaskState_setTaskWaiting
    line 812
    ldarg_0
    ldfld Scheduler.currentTask
    ret
    line 813
  end Scheduler_markWaiting
  type line 815 _$243 = pointer to Scheduler
  type line 817 _$244 = pointer to TaskControlBlock
  type _$245 = pointer to TaskState
  procedure Scheduler_schedule(me: _$243)
  var tmp: _$244; 
  begin
    line 819
    ldarg_0
    ldarg_0
    ldfld Scheduler.taskList
    stfld Scheduler.currentTask
    line 820
    while
      ldarg_0
      ldfld Scheduler.currentTask
      ldvar NO_TASK
      ceq
      ldc_i4_0
      ceq
    do
      line 821
      if
        ldarg_0
        ldfld Scheduler.currentTask
        ldflda TaskControlBlock.base
        call TaskState_isTaskHoldingOrWaiting
      then
        line 822
        ldarg_0
        ldfld Scheduler.currentTask
        call TaskControlBlock_getLink
        stloc_0
        line 823
        ldarg_0
        ldloc_0
        stfld Scheduler.currentTask
        line 824
      else
        line 825
        ldarg_0
        ldarg_0
        ldfld Scheduler.currentTask
        call TaskControlBlock_getIdentity
        stfld Scheduler.currentTaskIdentity
        line 826
        if
          ldvar TRACING
        then
          line 827
          ldarg_0
          ldarg_0
          ldfld Scheduler.currentTaskIdentity
          call Scheduler_trace
          line 828
        end
        line 829
        ldarg_0
        ldfld Scheduler.currentTask
        call TaskControlBlock_runTask
        stloc_0
        line 830
        ldarg_0
        ldloc_0
        stfld Scheduler.currentTask
        line 831
      end
      line 832
    end
    line 833
  end Scheduler_schedule
  type line 841 _$246 = pointer to Scheduler
  type line 842 _$247 = pointer to Scheduler
  procedure line 835 benchmark():int32
  var line 837 s: Scheduler; line 838 res: bool; 
  begin
    line 840
    ldc_i4_0
    stloc_1
    ldloca_s 0
    call Scheduler_init
    ldloca_s 0
    call Scheduler_start
    stloc_1
    line 843
    ldvar toDelete
    call RBObject_delete
    line 844
    ldnull
    stvar toDelete
    line 845
    if
      ldloc_1
    then
      ldc_i4_1
      ret
    else
      ldc_i4_0
      ret
    end
    line 846
  end benchmark
  procedure line 849 begin$() init 
  begin
    line 850
    ldstr "Richards begin"
    call MIC$!printStr
    ldc_i4_s 10
    call MIC$!printCh
    line 851
    ldc_i4_0
    stvar TRACING
    line 852
    ldnull
    stvar NO_WORK
    line 853
    ldnull
    stvar NO_TASK
    line 854
    ldnull
    stvar toDelete
    line 855
    call benchmark
    ldc_i4_0
    ceq
    ldc_i4_0
    ceq
    ldc_i4 855
    ldstr "/home/me/Entwicklung/Modules/Micron/testcases/Richards.mic"
    call MIC$!assert
    line 856
    ldstr "Richards end"
    call MIC$!printStr
    ldc_i4_s 10
    call MIC$!printCh
    line 857
  end begin$
end line 849 Richards
