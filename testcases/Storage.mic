(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2025 Rochus Keller <me@rochus-keller.ch> (for Micron migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)

module Storage

type
	Storage = record
	  count: integer
  	end

	TreeArray = record
	  arr: pointer to TreeArrayArray
	  len: uint32
	end
	
	TreeArrayArray = array of TreeArray

procedure freeTree(ta: ^TreeArray)
var i: integer; t: TreeArray
begin
   for i := 0 to ta.len-1 do
    	t := ta.arr[i]
        freeTree(@t)
    end
    if ta.arr # nil then dispose(ta.arr) end 
    ta.len := 0
    ta.arr := nil
end freeTree

procedure buildTreeDepth(me: ^Storage; depth: integer): TreeArray
var res: TreeArray; i: integer
begin
    inc(me.count)
    if depth = 1 then
        res.len := 2
        new(res.arr, res.len)
        for i := 0 to res.len-1 do
            res.arr[i].len := 0
            res.arr[i].arr := nil
        end
        return res
    else
        res.len := 4
        new(res.arr, res.len)
        for i := 0 to res.len-1 do
            res.arr[i] := buildTreeDepth(me, depth - 1)
        end
        return res
    end
end buildTreeDepth

procedure benchmark(s: ^Storage): integer
var arr: TreeArray
begin
    s.count := 0
    arr := buildTreeDepth(s, 7)
    freeTree(@arr)
    return s.count
end benchmark


procedure run()
var s: Storage
begin
	benchmark(@s)
	assert(s.count = 5461)
	println("success")
end run

begin
	println("begin Storage")
	run
	println("end Storage")
end Storage
