module BoundProcs

type
	T0 = object end
	T1 = object(T0) i: integer end
	TT = object end
	
proc T0.hello(const str: ^array of char)
begin
	print(str)
	println(" from T0")
end hello

proc T1.hello(const str: ^array of char)
begin
	print(str)
	println(" from T1")
end hello

var p: proc (^)(const str: ^array of char)
	t0: T0
	t1: T1
	t1p: ^T1
	tp: ^T0
	a: array 4 of T1
	ap: pointer to array 4 of T1
	app: pointer to array of T1
	n: u32

begin

t1.i := 33
println(t1.i)

p := t0.hello
p("hello")
t1.hello("gooday")

t1p := @t1 // also works, but unnecessary indirection
t1p.hello("as well")

p := t1.hello
p("bonjour")

a[1].hello("bon giorno")

new(t1p)
tp := t1p

tp.hello("gugus")
p := tp.hello
p("ave") // correctly calls T1.hello

dispose(t1p)

new(ap)
ap[2].hello("ap")
dispose(ap)

n := 4
new(app,n)
app[3].hello("app")
dispose(app)

end BoundProcs





