(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2025 Rochus Keller <me@rochus-keller.ch> (for Micron migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)

module Sieve

import Input, Out

procedure sieve(flags: pointer to array of boolean; size: integer): integer
var primeCount, i, k: integer
begin
    primeCount := 0

    for i := 2 to size do
        if flags[i - 1] then
            inc(primeCount)
            k := i + i
            while k <= size do
                flags[k - 1] := false
                k := k + i
            end
        end
    end
    return primeCount
end sieve

procedure benchmark(): integer
const count = 5000
var i, res: integer
	flags: pointer to array of boolean
begin
    new(flags, count)
    for i := 0 to count - 1 do
        flags[i] := true
    end
    res := sieve(flags, count)
    dispose(flags)
    return res
end benchmark

type Total = record total: integer end

procedure run()
var res : integer
	start, endTime, duration : integer
	total: ^Total
begin
	new(total)
	total.total := 0
	start := Input.Time()
	res := benchmark()
	print("result: ")println(res)
	assert( res = 669 )
	endTime := Input.Time()
	duration := endTime-start
	total.total := total.total + duration
	Out.String("runtime: ")
    Out.Int(total.total,0)
    Out.String("us")
    Out.Ln
    dispose(total)
end run

begin
	run
end Sieve
